# This workflow assumes a self hosted runner is set up with python and uv already. 
# This drastically increases the CI speed but at the cost of some pre-setup

# to connect to the worker use
# gcloud compute ssh --zone "us-central1-c" "github-actions-runner" --tunnel-through-iap --project "mtrx-hub-dev-3of"

# sudo apt install python3-pip pipx  openjdk-17-jdk
# curl -fsSL https://get.docker.com -o get-docker.sh
# sudo sh get-docker.sh
# pipx install uv
# pipx ensurepath
# sudo cp $(which uv) /usr/local/bin/uv

name: CI pipeline

on:
  pull_request:
    # Sequence of patterns matched against refs/heads
    branches:
      - main
      - develop
    # from https://github.com/reviewdog/action-eslint/issues/29#issuecomment-985939887
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review

  push:
    branches:
      - main
    paths: 
      - .github/workflows/matrix-ci.yml
      - pipelines/matrix/**
      - libs/*
      - pyproject.toml
      - uv.lock

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TQDM_DISABLE: 1
  TAG: ${{ github.sha }}

jobs:
  # leveraging a paths-filter approach to be able to make this run required for all PRs while still
  # not blocking merging with "Expected" for those runs that have a paths filter
  # FUTURE eventually github will likely fix this
  # https://github.com/orgs/community/discussions/26698
  paths_filter:
    if: github.event.pull_request.draft == false || github.ref == 'refs/heads/main'
    runs-on: 'ubuntu-latest'
    permissions: 
      pull-requests: read
      contents: 'read'
    outputs: 
      changed: ${{ steps.changes.outputs.src }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            src:
              - pipelines/matrix/**
              - .github/workflows/matrix-ci.yml
              - pyproject.toml
              - uv.lock
              - .dockerignore

  ci:
    runs-on: 'gha-runner-scale-set'
    needs: [paths_filter]
    if: needs.paths_filter.outputs.changed == 'true' && (github.event.pull_request.draft == false || github.ref == 'refs/heads/main')

    permissions:
      contents: 'read'
      id-token: 'write'
    defaults:
      run:
        working-directory: ./pipelines/matrix
    steps:
      - uses: actions/checkout@v4
        with: 
          submodules: recursive
          token: ${{ secrets.PAT }}
          persist-credentials: true
      - uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{vars.project_id}}
          workload_identity_provider: ${{vars.workload_identity_provider}}
          service_account: ${{vars.service_account}}

      # Setup steps
      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          version: "0.8.13"
      - run: env | sort

  # Run commands in parallel using matrix strategy.
  parallel_commands:
    runs-on: 'gha-runner-scale-set'
    needs: [paths_filter, ci]
    if: needs.paths_filter.outputs.changed == 'true' && (github.event.pull_request.draft == false || github.ref == 'refs/heads/main')
    
    strategy:
      fail-fast: false  # do not cancel other jobs if one fails
      matrix:
        command:
          - name: "precommit"
            run: "make precommit"
          - name: "kedro-catalog-base"
            run: "uv run kedro catalog resolve --env base"
          - name: "kedro-catalog-cloud"
            run: "uv run kedro catalog resolve --env cloud"
          - name: "kedro-catalog-test"
            run: "uv run kedro catalog resolve --env test"
          - name: "full-test"
            run: "make full_test"
          - name: "docker-test"
            run: 'make run_test_native_through_docker' #we overwrite the GIT_SHA in the Makefile


    permissions:
      contents: 'read'
      id-token: 'write'
    defaults:
      run:
        working-directory: ./pipelines/matrix

    steps:
      - uses: actions/checkout@v4
        with: 
          submodules: recursive
          token: ${{ secrets.PAT }}
          persist-credentials: true
      
      - uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{vars.project_id}}
          workload_identity_provider: ${{vars.workload_identity_provider}}
          service_account: ${{vars.service_account}}
      
      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          version: "0.8.13"

      # Setup steps (same as main ci job)
      - run: env | sort
            
      - name: Get Python version
        id: python-version
        run: echo "version=$(python3 --version | cut -d' ' -f2)" >> $GITHUB_OUTPUT

      - name: Cache Python virtual environment
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ runner.os }}-python-${{ steps.python-version.outputs.version }}-venv-${{ hashFiles('pipelines/matrix/uv.lock', 'pipelines/matrix/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ steps.python-version.outputs.version }}-venv-
            ${{ runner.os }}-python-

      - name: Check cache status and clean if needed
        run: |
          if [[ "${{ steps.cache-venv.outputs.cache-hit }}" == "true" ]]; then
            echo "‚úÖ Cache hit! Checking virtual environment validity..."
            # Check if the cached venv is still valid
            if [[ -d ".venv" ]] && [[ -f ".venv/pyvenv.cfg" ]]; then
              # Try to activate and check if Python works
              if .venv/bin/python --version > /dev/null 2>&1; then
                echo "‚úÖ Cached virtual environment is valid"
              else
                echo "‚ö†Ô∏è Cached virtual environment is invalid, removing..."
                rm -rf .venv
              fi
            else
              echo "‚ö†Ô∏è Cached virtual environment directory is incomplete, removing..."
              rm -rf .venv
            fi
          else
            echo "‚ùå Cache miss. Will install dependencies"
          fi

      # Install Python dependencies
      - name: Install Python dependencies
        run: uv sync

      # Run the specific command for this matrix job
      - name: "Run ${{ matrix.command.name }}"
        run: ${{ matrix.command.run }}

  # we use this check as required in our PRs to ensure that CI runs but only for our paths. 
  matrix_ci_check:
    name: Matrix CI PR Check
    runs-on:  'gha-runner-scale-set'
    if: always()
    needs: [paths_filter, ci, parallel_commands]
    steps:
      - if: ${{ needs.paths_filter.outputs.changed == 'true' && (needs.ci.result == 'failure' || needs.parallel_commands.result == 'failure') }}
        run: echo "CI failed, we are exiting" && exit 1
      - run: echo "Either no files were changed or we had happy CI, continuing"

      

  push_image:
    needs: [ci, parallel_commands]
    if: github.ref == 'refs/heads/main'
    runs-on: 'gha-runner-scale-set'
    environment: dev
    permissions: write-all
    defaults:
      run:
        working-directory: ./pipelines/matrix

    steps:
      - uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{vars.project_id}}
          workload_identity_provider: ${{vars.workload_identity_provider}}
          service_account: ${{vars.service_account}}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: "Docker auth"
        run: |-
          gcloud auth configure-docker ${{ vars.region }}-docker.pkg.dev --quiet

      - run: make docker_push TAG=latest
  
  # check for license violations
  # licenses:
  #   needs: [ci]
  #   # if: github.ref == 'refs/heads/main'
  #   runs-on: "gha-runner-scale-set"
  #   defaults:
  #     run:
  #       working-directory: ./pipelines/matrix
  #   steps:
  #     - run: make licenses_container
  
  # Add this new job at the end of your jobs section
  # following this tutorial: https://github.com/slackapi/slack-github-action?tab=readme-ov-file
  notify_failure:
    needs: [ci, parallel_commands, push_image]
    # This condition ensures it runs only if any previous job fails
    # we notify on main branches only
    if: failure() && github.ref == 'refs/heads/main' 
    runs-on: "gha-runner-scale-set"
    steps:
      - name: Post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          # You can pass in multiple channels to post to by providing a comma-delimited list of channel IDs.
          channel-id: 'C07HU35MKAQ' #github-notifications
          # For posting a simple plain text message
          slack-message: |
            GitHub Build Failed on Main branch! üö®

            üë©‚Äçüíª Code URL: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}
            üöÄ Action run link: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
