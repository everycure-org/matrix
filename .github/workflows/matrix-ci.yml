# This workflow assumes a self hosted runner is set up with python and uv already. 
# This drastically increases the CI speed but at the cost of some pre-setup

# to connect to the worker use
# gcloud compute ssh --zone "us-central1-c" "github-actions-runner" --tunnel-through-iap --project "mtrx-hub-dev-3of"

# sudo apt install python3-pip pipx  openjdk-17-jdk
# curl -fsSL https://get.docker.com -o get-docker.sh
# sudo sh get-docker.sh
# pipx install uv
# pipx ensurepath
# sudo cp $(which uv) /usr/local/bin/uv

name: CI pipeline

on:
  pull_request:
    # Sequence of patterns matched against refs/heads
    branches:
      - main
      - develop
      - infra
    # from https://github.com/reviewdog/action-eslint/issues/29#issuecomment-985939887
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review

  push:
    branches:
      - main
    paths: 
      - pipelines/matrix/**
      - .github/workflows/matrix-ci.yml

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TQDM_DISABLE: 1

jobs:
  # leveraging a paths-filter approach to be able to make this run required for all PRs while still
  # not blocking merging with "Expected" for those runs that have a paths filter
  # FUTURE eventually github will likely fix this
  # https://github.com/orgs/community/discussions/26698
  paths_filter:
    if: github.event.pull_request.draft == false || github.ref == 'refs/heads/main'
    runs-on: 'ubuntu-latest'
    permissions: 
      pull-requests: read
      contents: 'read'
    outputs: 
      changed: ${{ steps.changes.outputs.src }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with: 
          sparse-checkout: |
            pipelines/
            .github/
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            src:
              - pipelines/matrix/**
              - .github/workflows/matrix-ci.yml

  ci:
    runs-on: 'self-hosted'
    needs: [paths_filter]
    if: needs.paths_filter.outputs.changed == 'true' && (github.event.pull_request.draft == false || github.ref == 'refs/heads/main')
    
    outputs:
      status: ${{ steps.finally.outputs.status }}

    permissions:
      contents: 'read'
      id-token: 'write'
    defaults:
      run:
        working-directory: ./pipelines/matrix
    steps:
      - uses: actions/checkout@v4
        with: 
          sparse-checkout: |
            pipelines/matrix/
          submodules: recursive
          token: ${{ secrets.PAT }}
          persist-credentials: true
      - uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{vars.project_id}}
          workload_identity_provider: ${{vars.workload_identity_provider}}
          service_account: ${{vars.service_account}}

      # Setup steps
      - run: env | sort
      - run: make install
      - run: make precommit
      - run: make fetch_secrets
      
      # Run commands in parallel
      - name: Run parallel tests
        run: |
          # Create logs directory
          mkdir -p logs
          
          # Start all commands in background with error handling
          (uv run kedro catalog resolve --env base || echo "FAILED: catalog base") > logs/catalog_base.log 2>&1 &
          PID1=$!
          
          (uv run kedro catalog resolve --env cloud || echo "FAILED: catalog cloud") > logs/catalog_cloud.log 2>&1 &
          PID2=$!
          
          (uv run kedro catalog resolve --env test || echo "FAILED: catalog test") > logs/catalog_test.log 2>&1 &
          PID3=$!
          
          (make full_test || echo "FAILED: full_test") > logs/full_test.log 2>&1 &
          PID4=$!
          
          (make compose_down && make docker_test GIT_SHA="${GITHUB_SHA:0:7}" || echo "FAILED: docker_test") > logs/docker_test.log 2>&1 &
          PID5=$!
          
          # Wait for all processes
          wait $PID1; EXIT1=$?
          wait $PID2; EXIT2=$?
          wait $PID3; EXIT3=$?
          wait $PID4; EXIT4=$?
          wait $PID5; EXIT5=$?
          
          # Always show logs regardless of success/failure
          echo "=== Catalog Base Results (Exit: $EXIT1) ==="
          cat logs/catalog_base.log || echo "No log file found"
          
          echo "=== Catalog Cloud Results (Exit: $EXIT2) ==="
          cat logs/catalog_cloud.log || echo "No log file found"
          
          echo "=== Catalog Test Results (Exit: $EXIT3) ==="
          cat logs/catalog_test.log || echo "No log file found"
          
          echo "=== Full Test Results (Exit: $EXIT4) ==="
          cat logs/full_test.log || echo "No log file found"
          
          echo "=== Docker Test Results (Exit: $EXIT5) ==="
          cat logs/docker_test.log || echo "No log file found"
          
          # Report which tests failed
          FAILED_TESTS=""
          [ $EXIT1 -ne 0 ] && FAILED_TESTS="$FAILED_TESTS catalog_base($EXIT1)"
          [ $EXIT2 -ne 0 ] && FAILED_TESTS="$FAILED_TESTS catalog_cloud($EXIT2)"
          [ $EXIT3 -ne 0 ] && FAILED_TESTS="$FAILED_TESTS catalog_test($EXIT3)"
          [ $EXIT4 -ne 0 ] && FAILED_TESTS="$FAILED_TESTS full_test($EXIT4)"
          [ $EXIT5 -ne 0 ] && FAILED_TESTS="$FAILED_TESTS docker_test($EXIT5)"
          
          if [ -n "$FAILED_TESTS" ]; then
            echo "‚ùå Failed tests:$FAILED_TESTS"
            exit 1
          else
            echo "‚úÖ All tests passed!"
          fi
      
      # Cleanup
      - run: docker volume prune -f
      - id: finally
        if: failure()
        run: echo "status=failure" >> "$GITHUB_OUTPUT"
  # we use this check as required in our PRs to ensure that CI runs but only for our paths. 
  matrix_ci_check:
    name: Matrix CI PR Check
    runs-on:  'self-hosted'
    if: always()
    needs: [paths_filter, ci]
    steps:
      - if: ${{ needs.paths_filter.outputs.changed == 'true' && needs.ci.outputs.status == 'failure' }}
        run: echo "CI failed, we are exiting" && exit 1
      - run: echo "Either no files were changed or we had happy CI, continuing"

      

  push_image:
    needs: [ci]
    if: github.ref == 'refs/heads/main'
    runs-on: 'self-hosted'
    environment: dev
    permissions: write-all
    defaults:
      run:
        working-directory: ./pipelines/matrix

    steps:
      - uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{vars.project_id}}
          workload_identity_provider: ${{vars.workload_identity_provider}}
          service_account: ${{vars.service_account}}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: "Docker auth"
        run: |-
          gcloud auth configure-docker ${{ vars.region }}-docker.pkg.dev --quiet

      - run: make docker_push TAG=latest
  
  # check for license violations
  # licenses:
  #   needs: [ci]
  #   # if: github.ref == 'refs/heads/main'
  #   runs-on: "self-hosted"
  #   defaults:
  #     run:
  #       working-directory: ./pipelines/matrix
  #   steps:
  #     - run: make licenses_container
  
  # Add this new job at the end of your jobs section
  # following this tutorial: https://github.com/slackapi/slack-github-action?tab=readme-ov-file
  notify_failure:
    needs: [ci, push_image]
    # This condition ensures it runs only if any previous job fails
    # we notify on main branches only
    if: failure() && github.ref == 'refs/heads/main' 
    runs-on: "self-hosted"
    steps:
      - name: Post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          # You can pass in multiple channels to post to by providing a comma-delimited list of channel IDs.
          channel-id: 'C07HU35MKAQ' #github-notifications
          # For posting a simple plain text message
          slack-message: |
            GitHub Build Failed on Main branch! üö®

            üë©‚Äçüíª Code URL: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}
            üöÄ Action run link: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
