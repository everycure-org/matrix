name: Create Pull Request to Verify AI Summary of Release Notes

on:
  push:
    branches:
      - 'debug/release*'
      - 'gh-actions-weekly-submit'
  repository_dispatch:
    types: distribute-release

env:
  project_id: 'mtrx-hub-dev-3of'
  workload_identity_provider: 'projects/938607797672/locations/global/workloadIdentityPools/matrix-pool-rw/providers/matrix-gh-provider-rw'
  service_account: 'sa-github-actions-rw@mtrx-hub-dev-3of.iam.gserviceaccount.com'

jobs:
  create_release_notes_draft:
    runs-on: ubuntu-latest
    name: Create Draft of the Release Notes
    permissions:
      contents: 'write'
      id-token: 'write'
      pull-requests: 'write'

    steps:
      - name: store variables
        run: |
          if [[ "${{ github.event_name == 'repository_dispatch' }}" == "true" ]]; then
            release=$(echo '${{ toJson(github.event) }}' | jq -r '.client_payload.release_version')
            gitref=$(echo '${{ toJson(github.event) }}' | jq -r '.client_payload.git_fingerprint')
          else
            release="v0.2.7"
            gitref=${{github.ref_name}}
          fi
          echo "release=${release}" >> "$GITHUB_ENV"
          echo "gitref=${gitref}" >> "$GITHUB_ENV"

      - name: Checkout
        uses: actions/checkout@main
        with:
          # note that repo dispatch will checkout main
          fetch-tags: true
          fetch-depth: 0  # full depth needed so we can pass the AI all logs since the last release.

      # - name: Configure Git
      #   run: |
      #     git config --global user.email "releasebot@everycure.org"
      #     git config --global user.name "All of us at Every Cure"
      #     git config --global push.autosetupremote true

      - name: Fetch latest tag
        run: |
          latest_tag=$(git tag --list --sort="v:refname" | tail -n 1)
          echo "latest_tag=${latest_tag}" >> "$GITHUB_ENV"
          echo "Latest tag is ${latest_tag}"

      # - name: Tag the commit from which the data release was triggered
      #   run: |
      #     # Create an annotated tag, so that we can push it easily with the files using `follow-tags`.
      #     git tag --annotate --message '' -- "${{env.release}}" "${{env.gitref}}"

      # - name: Branch off
      #   # To comply with the protected-branch policy
      #   run: git switch -c release/${{env.release}} ${{env.gitref}}

      # - name: Setup Matrix CLI
      #   working-directory: apps/matrix-cli
      #   run: |
      #     pip install uv
      #     uv sync

      # - name: Authenticate with Google Cloud
      #   uses: 'google-github-actions/auth@v2'
      #   with:
      #     project_id: ${{env.project_id}}
      #     workload_identity_provider: ${{env.workload_identity_provider}}
      #     service_account: ${{env.service_account}}

      # - name: Download & commit release info file
      #   working-directory: docs/src/releases/changelog_files
      #   env:
      #     RELEASE_DIR_GCS: 'gs://mtrx-us-central1-hub-dev-storage/kedro/data/releases'
      #     FILENAME: ${{env.release}}_info.json
      #   run: |
      #     mkdir -p info && cd info
      #     BLOB_PATH="${RELEASE_DIR_GCS}/${{env.release}}/${FILENAME}"
      #     gcloud storage cp "$BLOB_PATH" "$FILENAME"
          
      #     git add "${FILENAME}" && \
      #     git commit -m "added release info json" && \
      #     git push

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install semver
        run: 
          pip install semver

      - name: Detect bump type
        run: |
          python -c "
          import os
          import semver

          latest_tag = os.getenv('latest_tag', 'v0.0.0').lstrip('v')
          tag_version = semver.Version.parse(latest_tag)
          release = os.getenv('release', 'v0.0.0').lstrip('v')
          release_version = semver.Version.parse(release)
          if int(tag_version.major) == int(release_version.major) and int(tag_version.minor) < int(release_version.minor):
            bump_type = 'minor'
          elif int(tag_version.major) == int(release_version.major) and int(tag_version.minor) == int(release_version.minor) and int(tag_version.patch) < int(release_version.patch):
            bump_type = 'patch'
          elif int(tag_version.major) < int(release_version.major):
            bump_type = 'major'
          else:
            bump_type = 'invalid'
          with open(os.getenv('GITHUB_ENV'), 'a') as env_file:
            env_file.write(f'bump_type={bump_type}\n')
          "
      
      - name: Print env variables
        run: |
          cat "$GITHUB_ENV"

      - name: Create Release Notes
        working-directory: apps/matrix-cli
        env:
          GH_TOKEN: ${{ github.token }}
          POSTS_DIR: docs/src/releases/posts
        if: env.bump_type != 'patch'
        run:
          echo "this is a minor or major bump"
        # run: |
        #   gcloud config list account --format "value(core.account)"
          
        #   mkdir -p "${{env.release}}"
        #   uv run matrix releases release-notes --headless --output-file "${{env.release}}/notes.md"
        #   # If these fail, you may have crossed the quotas. See 
        #   # https://cloud.google.com/vertex-ai/generative-ai/docs/quotas
        #   uv run matrix releases article \
        #     --headless \
        #     --output-file "${{env.release}}/post.md" \
        #     --no-disable-rendering \
        #     --notes-file "${{env.release}}/notes.md"
        #   mv "${{env.release}}" "${GITHUB_WORKSPACE}/${POSTS_DIR}"
        #   git add "${GITHUB_WORKSPACE}/${POSTS_DIR}/${{env.release}}" && \
        #   git commit -m "added release notes & article draft" && \
        #   git push --follow-tags

      # - name: Create Pull Request
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      #   run: |
      #     gh pr create \
      #     --title "Release/${{env.release}}" \
      #     --base main \
      #     --body "Adds release information. For minor and major bump,the release article and associated notes are generated" \
      #     --draft \
      #     --label Release \
      #     --label hide-from-release
