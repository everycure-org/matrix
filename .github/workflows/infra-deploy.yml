name: Infrastructure Deploy
on:
  workflow_call:
    inputs:
      deployment_path:
        required: true
        type: string
        description: 'Path to the terragrunt module to deploy, relative to infra/deployments/'
      environment:
        required: true
        type: string
        description: 'Environment to deploy to (dev/prod)'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.deployment_path }}
  cancel-in-progress: false
env:
  tf_version: '1.5.7'
  tg_version: '0.58.11'
  deployment_path: infra/deployments/${{ inputs.deployment_path }}
  environment: ${{ inputs.environment }}

jobs:
  # Uncomment this for debugging the JWT tokens
  paths_filter:
    runs-on: 'ubuntu-latest'
    outputs: 
      changed: ${{ steps.changes.outputs.src }}
    permissions:
      pull-requests: read
      contents: 'read'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          base: ${{ (inputs.environment == 'prod') && 'infra-prod-debug' || 'infra' }}
          filters: |
            src:
              - ${{ env.deployment_path }}/**
              - .github/workflows/infra-*.yml
              - infra/modules/**
 #Uncomment as necessary, avoiding this step when not needed as it takes 90s per CI run which adds up
#  debug:
#   needs: [paths_filter]
#   runs-on: 'ubuntu-latest'
#   environment: ${{ inputs.environment }}
#   if: github.ref == 'refs/heads/infra' || github.ref == 'refs/heads/infra-prod-debug'
#   permissions:
#     id-token: 'write'
#     contents: 'read'
#   steps:
#     - name: 'Checkout'
#       uses: actions/checkout@v4
#     # note this does NOT fail even if the credentials are invalid!
#     - name: Checkout actions-oidc-debugger
#       uses: actions/checkout@v3
#       with:
#         repository: github/actions-oidc-debugger
#         ref: main
#         path: ./.github/actions/actions-oidc-debugger
#     - name: Debug OIDC Claims
#       uses: ./.github/actions/actions-oidc-debugger
#       with:
#         audience: '${{ github.server_url }}/${{ github.repository_owner }}'
#     - uses: 'google-github-actions/auth@v2'
#       with:
#         project_id: ${{vars.project_id}}
#         workload_identity_provider: ${{vars.workload_identity_provider_ro}}
#         service_account: ${{vars.service_account_ro}}
#     - run: cat /home/runner/work/matrix/matrix/gha-creds*
#     - name: 'Set up Cloud SDK'
#       uses: 'google-github-actions/setup-gcloud@v2'
#       with:
#         version: '>= 363.0.0'
#
#     - name: 'Use gcloud CLI'
#       run: |
#         if [ "${{ inputs.environment }}" = "prod" ]; then
#           gcloud storage ls gs://mtrx-us-central1-hub-prod-storage/
#         else
#           gcloud storage ls gs://mtrx-us-central1-hub-dev-storage/
#         fi

  checks:
    needs: [paths_filter]
    if: needs.paths_filter.outputs.changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
           terraform_version: "^1.5.7"
           terraform_wrapper: false

      - name: Check terragrunt HCL
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.deployment_path }}
          tg_command: 'hclfmt --terragrunt-check --terragrunt-diff'
      - name: check terraform files
        run: terraform fmt -check -recursive ${{ env.deployment_path }}

  plan:
    # runs under RO user
    runs-on: ubuntu-latest
    name: Plan Terraform
    needs: [ checks ]
    environment: ${{ inputs.environment }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.PAT }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
           terraform_version: "^1.5.7"
           terraform_wrapper: false

      - name: Setup git-crypt (dev)
        working-directory: infra/secrets
        id: git-crypt-dev
        run: |
          sudo apt-get install git-crypt -y
          echo ${{ secrets.GIT_CRYPT_KEY_DEV_v2 }} | base64 -d > TMP_KEY
          git-crypt unlock TMP_KEY
          rm -rf TMP_KEY
      - name: Setup git-crypt (prod)
        id: git-crypt-prod
        working-directory: infra/secrets
        if: inputs.environment == 'prod'
        run: |
          echo ${{ secrets.GIT_CRYPT_KEY_PROD_v2 }} | base64 -d > TMP_KEY
          git-crypt unlock TMP_KEY
          rm -rf TMP_KEY
      - uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{vars.project_id}}
          workload_identity_provider: ${{vars.workload_identity_provider_ro}}
          service_account: ${{vars.service_account_ro}}

      - name: Plan
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.deployment_path }}
          tg_command: 'plan -lock=false -refresh=false' #we do not check the remote state, this is a compromise that avoids giving read rights to secrets

  deploy:
    # runs under RW user
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/infra' || github.ref == 'refs/heads/infra-prod-debug'
    environment: ${{ inputs.environment }}
    name: Apply Terraform
    needs: [ checks, plan ]
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      # FUTURE avoid duplicate boilerplate somehow on checkout/auth/crypt
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.PAT }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
           terraform_version: "^1.5.7"
           terraform_wrapper: false
      - name: Setup git-crypt (dev)
        working-directory: infra/secrets
        id: git-crypt-dev
        run: |
          sudo apt-get install git-crypt -y
          echo ${{ secrets.GIT_CRYPT_KEY }} | base64 -d > TMP_KEY
          git-crypt unlock TMP_KEY
          rm -rf TMP_KEY
      - name: Setup git-crypt (prod)
        id: git-crypt-prod
        working-directory: infra/secrets
        if: inputs.environment == 'prod'
        run: |
          echo ${{ secrets.GIT_CRYPT_KEY_PROD }} | base64 -d > TMP_KEY
          git-crypt unlock TMP_KEY
          rm -rf TMP_KEY
      - uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{vars.project_id}}
          workload_identity_provider: ${{vars.workload_identity_provider_rw}}
          service_account: ${{vars.service_account_rw}}

      - name: Deploy
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: ${{ env.deployment_path }}
          tg_command: 'apply'
      
      - name: Post to a Slack channel
        # Only post to Slack if the deployment failed and we're on the infra branch
        if: failure() && (github.ref == 'refs/heads/infra' || github.ref == 'refs/heads/infra-prod-debug')
        id: slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          # You can pass in multiple channels to post to by providing a comma-delimited list of channel IDs.
          channel-id: 'C07HU35MKAQ' #github-notifications
          # For posting a simple plain text message
          slack-message: |
            **🚧 Terraform Deployment Failed! 🚨**
            👩‍💻 Code URL: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}
            🚀 Action run link: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            📂 Deployment path: ${{ env.deployment_path }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}