name: Automate kedro sumbit release run periodically

on:
  push:
    branches:
      - 'gh-actions-weekly-submit'
#   schedule:
#     - cron:

env:
  project_id: 'mtrx-hub-dev-3of'
  workload_identity_provider: 'projects/938607797672/locations/global/workloadIdentityPools/matrix-pool-rw/providers/matrix-gh-provider-rw'
  service_account: 'sa-github-actions-rw@mtrx-hub-dev-3of.iam.gserviceaccount.com'

jobs:
  create_release_notes_draft:
    runs-on: ubuntu-latest
    name: Create Draft of the Release Notes
    permissions:
      contents: 'write'
      id-token: 'write'
      pull-requests: 'write'

    steps:

      - name: Checkout
        uses: actions/checkout@main
        with:
          # note that repo dispatch will checkout main
          fetch-tags: true
          fetch-depth: 0  # full depth needed so we can pass the AI all logs since the last release.
      
      - name: Fetch latest tag
        id: fetch_latest_tag
        run: |
          latest_tag=$(git tag --list --sort="v:refname" | tail -n 1)
          echo "latest_tag=${latest_tag}" >> "$GITHUB_ENV"
          echo "Latest tag is ${latest_tag}"

      - name: Set up kedro project dependencies and semver
        working-directory: pipelines/matrix
        run: |
          pip install -r requirements.txt
          pip install semver

      - name: Increment patch version
        working-directory: pipelines/matrix
        run: |
          python -c "
          import os
          import semver

          latest_tag = os.getenv('latest_tag', 'v0.0.0').lstrip('v')
          version = semver.Version.parse(latest_tag)
          new_version = version.bump_patch()
          with open(os.getenv('GITHUB_ENV'), 'a') as env_file:
            env_file.write(f'release_version=v{new_version}\n')
          "
          echo "New version is '${{ env.new_version }}'"

      #     # remove the 'v' prefix
      #     clean_tag="${{ env.latest_tag }}#v"
      #     # remove the '-*' suffix
      #     base_tag="${clean_tag%%-*}"
      #     IFS='.' read -r major minor patch <<< "$base_tag"
      #     # default to 0 if the patch version is not present
      #     patch=${patch:-0}
      #     patch=$((patch + 1))
      #     release_version="v${major}.${minor}.${patch}"
      #     echo "release_version=${release_version}" >> "$GITHUB_ENV"
      #     echo "New release version is ${release_version}"

      # - name: Submit the kedro pipeline
      #   working-directory: pipelines/matrix
      #   run:
      #     kedro submit \
      #     --username GH-Actions-bot \
      #     --namespace argo-workflows \
      #     --run-name weekly-data-release \
      #     --release-version "${{ env.new_version }}" \
      #     --pipeline data_release \
      #     --is-test # remove this flag to run the pipeline in production

