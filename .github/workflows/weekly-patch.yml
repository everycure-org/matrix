name: Automate kedro sumbit release run periodically

on:
  push:
    branches:
      - 'debug/release*'
#   schedule:
#     - cron:

env:
  project_id: 'mtrx-hub-dev-3of'
  workload_identity_provider: 'projects/938607797672/locations/global/workloadIdentityPools/matrix-pool-rw/providers/matrix-gh-provider-rw'
  service_account: 'sa-github-actions-rw@mtrx-hub-dev-3of.iam.gserviceaccount.com'

jobs:
  create_release_notes_draft:
    runs-on: ubuntu-latest
    name: Create Draft of the Release Notes
    permissions:
      contents: 'write'
      id-token: 'write'
      pull-requests: 'write'

    steps:

      - name: Checkout
        uses: actions/checkout@main
        with:
          # note that repo dispatch will checkout main
          fetch-tags: true
          fetch-depth: 0  # full depth needed so we can pass the AI all logs since the last release.
      
      - name: Fetch latest tag
        id: fetch_latest_tag
        run: |
          latest_tag=$(git tag --list --sort="v:refname" | tail -n 1)
          echo "latest_tag=${latest_tag}" >> "$GITHUB_ENV"
          echo "Latest tag is ${latest_tag}"

      - name: Increment patch version
        id: increment_patch
        run: |
          # remove the 'v' prefix
          clean_tag="${{ env.latest_tag }}#v"
          # remove the '-*' suffix
          base_tag="${clean_tag%%-*}"
          IFS='.' read -r major minor patch <<< "$base_tag"
          # default to 0 if the patch version is not present
          patch=${patch:-0}
          patch=$((patch + 1))
          release_version="v${major}.${minor}.${patch}"
          echo "release_version=${release_version}" >> "$GITHUB_ENV"
          echo "New release version is ${release_version}"

      - name: Configure Git
        run: |
          git config --global user.email "releasebot@everycure.org"
          git config --global user.name "All of us at Every Cure"
          git config --global push.autosetupremote true

      - name: Tag the commit from which the data release was triggered
        run: |
          # Create an annotated tag, so that we can push it easily with the files using `follow-tags`.
          git tag --annotate --message '' -- "${{env.release}}" "${{env.gitref}}"

      - name: Branch off
        # To comply with the protected-branch policy
        run: git switch -c release/${{env.release}}

      - name: Setup Matrix CLI
        working-directory: apps/matrix-cli
        run: |
          pip install uv
          uv sync

      - name: Authenticate with Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{env.project_id}}
          workload_identity_provider: ${{env.workload_identity_provider}}
          service_account: ${{env.service_account}}

      - name: Download & commit release info file
        working-directory: docs/src/releases
        env:
          RELEASE_DIR_GCS: 'gs://mtrx-us-central1-hub-dev-storage/kedro/data/releases'
          FILENAME: ${{env.release}}_info.json
        run: |
          mkdir -p info && cd info
          BLOB_PATH="${RELEASE_DIR_GCS}/${{env.release}}/${FILENAME}"
          gcloud storage cp "$BLOB_PATH" "$FILENAME"
          
          git add "${FILENAME}" && \
          git commit -m "added release info json" && \
          git push

      - name: Create Release Notes
        working-directory: apps/matrix-cli
        env:
          GH_TOKEN: ${{ github.token }}
          POSTS_DIR: docs/src/releases/posts
        run: |
          gcloud config list account --format "value(core.account)"
          
          mkdir -p "${{env.release}}"
          uv run matrix releases release-notes --headless --output-file "${{env.release}}/notes.md"
          # If these fail, you may have crossed the quotas. See 
          # https://cloud.google.com/vertex-ai/generative-ai/docs/quotas
          uv run matrix releases article \
            --headless \
            --output-file "${{env.release}}/post.md" \
            --no-disable-rendering \
            --notes-file "${{env.release}}/notes.md"
          mv "${{env.release}}" "${GITHUB_WORKSPACE}/${POSTS_DIR}"
          git add "${GITHUB_WORKSPACE}/${POSTS_DIR}/${{env.release}}" && \
          git commit -m "added release notes & article draft" && \
          git push --follow-tags

      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          gh pr create \
          --title "Release/${{env.release}}" \
          --base main \
          --body "Adds the release article and associated notes" \
          --draft \
          --label Release \
          --label hide-from-release
