name: Automate kedro sumbit release run periodically

on:
  push:
    branches:
      - 'gh-actions-weekly-submit'
  # schedule:
  #   - cron: '30 9 * * 1' # 9:30 AM every Monday
  #   - cron: '30 9 1 * *' # 9:30 AM on the first of every month

env:
  project_id: 'mtrx-hub-dev-3of'
  workload_identity_provider: 'projects/938607797672/locations/global/workloadIdentityPools/matrix-pool-rw/providers/matrix-gh-provider-rw'
  service_account: 'sa-github-actions-rw@mtrx-hub-dev-3of.iam.gserviceaccount.com'
  region: 'us-central1'
  cluster: 'compute-cluster'

jobs:

  submit_data_release_periodically:
    runs-on: 
      labels: ubuntu-latest
    name: Submit the Kedro Pipeline Periodically
    permissions:
      contents: 'write'
      id-token: 'write'
      pull-requests: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          fetch-tags: true
          fetch-depth: 0  # full depth needed so we can pass the AI all logs since the last release.

      - name: Remove unnecessary files
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

      - name: Clean up Docker
        run:
          docker system prune -a --volumes -f

      - name: Check disk space
        run: 
          df -h
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Authenticate with Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: ${{env.project_id}}
          workload_identity_provider: ${{env.workload_identity_provider}}
          service_account: ${{env.service_account}}
          token_format: access_token

      - uses: google-github-actions/get-gke-credentials@v1 # configure authentication to a GKE cluster (configure kubectl)
        with:
          cluster_name: ${{env.cluster}}
          location: ${{env.region}}
          project_id: ${{env.project_id}}

      - name: Login to GAR # the docker image is pushed to Google Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: ${{env.region}}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Fetch latest tag
        id: fetch_latest_tag
        run: |
          latest_tag=$(git tag --list --sort="v:refname" | tail -n 1)
          echo "latest_tag=${latest_tag}" >> "$GITHUB_ENV"
          echo "Latest tag is ${latest_tag}"

      - name: Increment patch version
        # if : github.event.schedule == '30 9 * * 1' # weekly bump
        working-directory: docs/scripts
        run: |
          pip install semver
          python patch_bump.py

      # - name: Increment minor version
      #   # if : github.event.schedule == '30 9 1 * *' # monthly bump
      #   working-directory: docs/scripts
      #   run:
      #     pip install semver
      #     python minor_bump.py

      - name: Set up kedro project dependencies
        working-directory: pipelines/matrix
        run: |
          curl -sLO https://github.com/argoproj/argo-workflows/releases/latest/download/argo-linux-amd64.gz
          gunzip argo-linux-amd64.gz
          chmod +x argo-linux-amd64
          sudo mv argo-linux-amd64 /usr/local/bin/argo
          argo version
          pip install -r requirements.txt
          pip install uv

      # - name: Docker build and push
      #   working-directory: pipelines/matrix
      #   run: |
      #     make docker_push TAG=GH-Actions-bot

      - name: Check disk space
        run: 
          df -h

      - name: Submit the kedro pipeline
        working-directory: pipelines/matrix
        run: |
          echo "Submit the kedro pipeline"
          make docker_pull TAG=GH-Actions-bot
          kedro submit \
            --username GH-Actions-bot \
            --namespace argo-workflows \
            --run-name auto-kg-release \
            --release-version "${{ env.release_version }}" \
            --pipeline ingestion \
            --is-test \
            --headless \
            --run-from-gh