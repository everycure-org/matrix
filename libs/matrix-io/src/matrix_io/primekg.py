import polars as pl


def coalesce_duplicate_columns(df: pl.DataFrame, keep: list[str]) -> pl.DataFrame:
    """Coalesce columns generated by a join and appended with _right suffix."""
    cols = df.columns
    out = df
    # Group base names by removing Polars' default suffixes like "_right"; we coalesce pairs ending with "_right"
    # Since we used full join with coalesce=True in lazy join, duplications might already be minimized; still be safe.
    for c in list(cols):
        if c.endswith("_right"):
            base = c[:-6]
            if base in out.columns:
                out = out.with_columns(pl.coalesce([pl.col(base), pl.col(c)]).alias(base)).drop(c)
    return out


def mondo_grouped_exploded(edges_df: pl.DataFrame, x_or_y: str) -> pl.DataFrame:
    """PrimeKG has represented groups of MONDO instances against a common object.  We are exploding those into separate triples here."""
    source = f"{x_or_y}_source"
    _id = f"{x_or_y}_id"
    source_mondo = (
        edges_df.lazy()
        .filter(pl.col(source) == pl.lit("MONDO_grouped"))
        .with_columns(
            [
                pl.col(_id).cast(pl.Utf8).str.split("_").alias(_id),
                pl.when(pl.col(source) == pl.lit("MONDO_grouped"))
                .then(pl.lit("MONDO"))
                .otherwise(pl.col(source))
                .alias(source),
            ]
        )
        .explode(_id)
    )
    not_mondo = edges_df.lazy().filter(pl.col(source) != pl.lit("MONDO_grouped"))
    return pl.concat([source_mondo, not_mondo]).collect()
