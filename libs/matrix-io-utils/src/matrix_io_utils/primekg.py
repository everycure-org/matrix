import polars as pl


def coalesce_duplicate_columns(df: pl.DataFrame, keep: list[str]) -> pl.DataFrame:
    """Coalesce columns generated by a join and appended with _right suffix."""
    cols = df.columns
    out = df
    # Group base names by removing Polars' default suffixes like "_right"; we coalesce pairs ending with "_right"
    # Since we used full join with coalesce=True in lazy join, duplications might already be minimized; still be safe.
    for c in list(cols):
        if c.endswith("_right"):
            base = c[:-6]
            if base in out.columns:
                out = out.with_columns(pl.coalesce([pl.col(base), pl.col(c)]).alias(base)).drop(c)
    return out


def mondo_grouped_exploded(edges_df: pl.LazyFrame) -> pl.LazyFrame:
    """PrimeKG has represented groups of MONDO instances against a common object.  We are exploding those into separate triples here."""

    mappings = [{"source": "x_source", "id": "x_id"}, {"source": "y_source", "id": "y_id"}]
    for map_item in mappings:
        source_mondo = (
            edges_df.filter(pl.col(map_item["source"]) == pl.lit("MONDO_grouped"))
            .with_columns(
                [
                    pl.col(map_item["id"]).cast(pl.Utf8).str.split("_").alias(map_item["id"]),
                    pl.when(pl.col(map_item["source"]) == pl.lit("MONDO_grouped"))
                    .then(pl.lit("MONDO"))
                    .otherwise(pl.col(map_item["source"]))
                    .alias(map_item["source"]),
                ]
            )
            .explode(map_item["id"])
        )
        not_mondo = edges_df.filter(pl.col(map_item["source"]) != pl.lit("MONDO_grouped"))
        edges_df = pl.concat([source_mondo, not_mondo])
    return edges_df


def fix_curies(edges: pl.LazyFrame) -> pl.LazyFrame:
    """Apply subject & object CURIE formatting."""
    mapping = [
        {"sub_or_obj_col": "subject", "source": "x_source", "id": "x_id"},
        {"sub_or_obj_col": "object", "source": "y_source", "id": "y_id"},
    ]

    for map_item in mapping:
        edges = (
            edges.with_columns(
                [
                    pl.when(pl.col(map_item["source"]) == pl.lit("NCBI"))
                    .then(
                        pl.concat_str(
                            [pl.col(map_item["source"]), pl.col(map_item["id"])], separator="Gene:", ignore_nulls=True
                        )
                    )
                    .otherwise(pl.col(map_item["source"]))
                    .alias(map_item["sub_or_obj_col"]),
                ]
            )
            .with_columns(
                [
                    pl.when(pl.col(map_item["source"]) == pl.lit("REACTOME"))
                    .then(pl.concat_str([pl.lit("REACT"), pl.col(map_item["id"])], separator=":", ignore_nulls=True))
                    .otherwise(pl.col(map_item["sub_or_obj_col"]))
                    .alias(map_item["sub_or_obj_col"]),
                ]
            )
            .with_columns(
                [
                    pl.when(pl.col(map_item["source"]).str.contains("HPO|MONDO|UBERON"))
                    .then(
                        pl.concat_str(
                            [pl.col(map_item["source"]), pl.col(map_item["id"]).cast(pl.Utf8).str.pad_start(7, "0")],
                            separator=":",
                            ignore_nulls=True,
                        )
                    )
                    .otherwise(pl.col(map_item["sub_or_obj_col"]))
                    .alias(map_item["sub_or_obj_col"]),
                ]
            )
            .with_columns(
                [
                    pl.when(pl.col(map_item["source"]).str.contains("CTD|GO|DrugBank"))
                    .then(
                        pl.concat_str(
                            [pl.col(map_item["source"]), pl.col(map_item["id"])], separator=":", ignore_nulls=True
                        )
                    )
                    .otherwise(pl.col(map_item["sub_or_obj_col"]))
                    .alias(map_item["sub_or_obj_col"]),
                ]
            )
        )
    return edges
