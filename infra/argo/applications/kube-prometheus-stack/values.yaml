kube-prometheus-stack:
  prometheus:
    prometheusSpec:
      retention: 180d
      storageSpec:
        volumeClaimTemplate:
          spec:
            # by default prometheus uses a local storage, which is not persistent
            storageClassName: standard-rwo # balanced 
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 100Gi
      # add service monitors for argo-workflows which thus also get collected by prometheus
      additionalServiceMonitors:
        - name: argo-workflows
          selector:
            matchLabels:
              app.kubernetes.io/name: argo-workflows-server
          namespaceSelector:
            matchNames:
              - argo-workflows 
          endpoints:
            - port: metrics
              path: /metrics
        - name: argo-workflows-controller
          selector:
            matchLabels:
              app.kubernetes.io/name: argo-workflows-workflow-controller
          namespaceSelector:
            matchNames:
              - argo-workflows  
          endpoints:
            - port: metrics
              path: /metrics
        # Updated GPU monitoring for workflows with DCGM sidecar
        - name: gpu-metrics-kedro-argo
          selector:
            matchLabels:
              app: kedro-argo
          namespaceSelector:
            matchNames:
              - argo-workflows
          endpoints:
            - port: gpu-metrics
              path: /metrics
              interval: 15s
              scrapeTimeout: 10s
        
        # Add pod monitor for direct pod scraping (alternative approach)
      additionalPodMonitors:
        - name: dcgm-sidecar-pods
          selector:
            matchLabels:
              app: kedro-argo
          namespaceSelector:
            matchNames:
              - argo-workflows
          podMetricsEndpoints:
            - port: gpu-metrics
              path: /metrics
              interval: 15s
              scrapeTimeout: 10s
      
      # Allow scraping of pods directly (needed for sidecar containers)
      additionalScrapeConfigs:
        - job_name: 'dcgm-exporter-sidecars'
          kubernetes_sd_configs:
            - role: pod
              namespaces:
                names:
                  - argo-workflows
          relabel_configs:
            - source_labels: [__meta_kubernetes_pod_label_app]
              action: keep
              regex: kedro-argo
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
              action: replace
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $1:$2
              target_label: __address__
            - action: labelmap
              regex: __meta_kubernetes_pod_label_(.+)
            - source_labels: [__meta_kubernetes_namespace]
              action: replace
              target_label: kubernetes_namespace
            - source_labels: [__meta_kubernetes_pod_name]
              action: replace
              target_label: kubernetes_pod_name
  grafana:
    persistence:
      enabled: true
      type: sts
      storageClassName: standard-rwo
      accessModes:
        - ReadWriteOnce
      size: 20Gi
      finalizers:
        - kubernetes.io/pvc-protection
    sidecar:
      dashboards:
        enabled: true
      defaultFolderName: "General"
      label: grafana_dashboard
      labelValue: "1"
      folderAnnotation: grafana_folder
      searchNamespace: ALL
      provider:
        foldersFromFilesStructure: true
