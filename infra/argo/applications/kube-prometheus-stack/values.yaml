kube-prometheus-stack:
  # Configure kubelet ServiceMonitor to add workflow name extraction
  kubelet:
    serviceMonitor:
      # Add relabeling to extract workflow name from pod labels (before scraping)
      cAdvisorRelabelings:
        # Default metrics_path relabeling (required)
        - action: replace
          sourceLabels: [__metrics_path__]
          targetLabel: metrics_path
        # Extract all pod labels with prefix
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
          replacement: pod_${1}
      # Add metric relabeling to extract workflow name from pod name for cAdvisor metrics
      cAdvisorMetricRelabelings:
        # Default drop rules from upstream (preserving them)
        - sourceLabels: [__name__]
          action: drop
          regex: 'container_cpu_(cfs_throttled_seconds_total|load_average_10s|system_seconds_total|user_seconds_total)'
        - sourceLabels: [__name__]
          action: drop
          regex: 'container_fs_(io_current|io_time_seconds_total|io_time_weighted_seconds_total|reads_merged_total|sector_reads_total|sector_writes_total|writes_merged_total)'
        - sourceLabels: [__name__]
          action: drop
          regex: 'container_memory_(mapped_file|swap)'
        - sourceLabels: [__name__]
          action: drop
          regex: 'container_(file_descriptors|tasks_state|threads_max)'
        - sourceLabels: [__name__, scope]
          action: drop
          regex: 'container_memory_failures_total;hierarchy'
        - sourceLabels: [__name__, interface]
          action: drop
          regex: 'container_network_.*;(cali|cilium|cni|lxc|nodelocaldns|tunl).*'
        - sourceLabels: [__name__]
          action: drop
          regex: 'container_spec.*'
        - sourceLabels: [id, pod]
          action: drop
          regex: '.+;'
  
  prometheus:
    prometheusSpec:
      retention: 180d
      storageSpec:
        volumeClaimTemplate:
          spec:
            # by default prometheus uses a local storage, which is not persistent
            storageClassName: standard-rwo # balanced 
            accessModes: ["ReadWriteOnce"]
            resources:
              requests:
                storage: 100Gi
      # add service monitors for argo-workflows which thus also get collected by prometheus
      additionalServiceMonitors:
        - name: argo-workflows
          selector:
            matchLabels:
              app.kubernetes.io/name: argo-workflows-server
          namespaceSelector:
            matchNames:
              - argo-workflows 
          endpoints:
            - port: metrics
              path: /metrics
              relabelings:
                # Extract all pod labels with prefix
                - action: labelmap
                  regex: __meta_kubernetes_pod_label_(.+)
                  replacement: pod_${1}
        - name: argo-workflows-controller
          selector:
            matchLabels:
              app.kubernetes.io/name: argo-workflows-workflow-controller
          namespaceSelector:
            matchNames:
              - argo-workflows  
          endpoints:
            - port: metrics
              path: /metrics
              relabelings:
                # Extract all pod labels with prefix
                - action: labelmap
                  regex: __meta_kubernetes_pod_label_(.+)
                  replacement: pod_${1}
        # Updated GPU monitoring for workflows with DCGM sidecar
        - name: gpu-metrics-kedro-argo
          selector:
            matchLabels:
              app: kedro-argo
          namespaceSelector:
            matchNames:
              - argo-workflows
          endpoints:
            - port: gpu-metrics
              path: /metrics
              interval: 15s
              scrapeTimeout: 10s
              relabelings:
                # Extract all pod labels with prefix
                - action: labelmap
                  regex: __meta_kubernetes_pod_label_(.+)
                  replacement: pod_${1}
        
        # DCGM DaemonSet monitoring (cluster-wide GPU monitoring)
        - name: dcgm-exporter-daemonset
          selector:
            matchLabels:
              app.kubernetes.io/name: dcgm-exporter
          namespaceSelector:
            matchNames:
              - monitoring
          endpoints:
            - port: metrics
              path: /metrics
              interval: 15s
              scrapeTimeout: 10s
              honorLabels: true
              relabelings:
                # Extract all pod labels with prefix
                - action: labelmap
                  regex: __meta_kubernetes_pod_label_(.+)
                  replacement: pod_${1}
        
        # Generic DCGM monitoring for any pods with dcgm-exporter label
        - name: dcgm-exporter-pods
          selector:
            matchLabels:
              app: dcgm-exporter
          namespaceSelector:
            any: true
          endpoints:
            - port: metrics
              path: /metrics
              interval: 15s
              scrapeTimeout: 10s
              honorLabels: true
              relabelings:
                # Extract all pod labels with prefix
                - action: labelmap
                  regex: __meta_kubernetes_pod_label_(.+)
                  replacement: pod_${1}
        
        # Add pod monitor for direct pod scraping (alternative approach)
      additionalPodMonitors:
        - name: dcgm-sidecar-pods
          selector:
            matchLabels:
              app: kedro-argo
          namespaceSelector:
            matchNames:
              - argo-workflows
          podMetricsEndpoints:
            - port: gpu-metrics
              path: /metrics
              interval: 15s
              scrapeTimeout: 10s
              relabelings:
                # Extract all pod labels with prefix
                - action: labelmap
                  regex: __meta_kubernetes_pod_label_(.+)
                  replacement: pod_${1}
      
      # Allow scraping of pods directly (needed for sidecar containers)
      additionalScrapeConfigs: []
        # Additional scrape configs can be added here if needed
        # Currently using ServiceMonitors for all monitoring configuration
  grafana:
    persistence:
      enabled: true
      type: sts
      storageClassName: standard-rwo
      accessModes:
        - ReadWriteOnce
      size: 20Gi
      finalizers:
        - kubernetes.io/pvc-protection
    sidecar:
      dashboards:
        enabled: true
      defaultFolderName: "General"
      label: grafana_dashboard
      labelValue: "1"
      folderAnnotation: grafana_folder
      searchNamespace: ALL
      provider:
        foldersFromFilesStructure: true
