# DCGM Host Engine DaemonSet (Google's two-container approach)
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "dcgm-exporter.fullname" . }}-hostengine
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "dcgm-exporter.labels" . | nindent 4 }}
    component: hostengine
spec:
  selector:
    matchLabels:
      {{- include "dcgm-exporter.selectorLabels" . | nindent 6 }}
      component: hostengine
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        {{- include "dcgm-exporter.selectorLabels" . | nindent 8 }}
        component: hostengine
    spec:
      hostNetwork: true
      hostPID: true
      {{- with .Values.nodeAffinity }}
      affinity:
        nodeAffinity:
          {{- toYaml . | nindent 10 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: nvidia-dcgm
        image: "nvcr.io/nvidia/cloud-native/dcgm:3.3.0-1-ubuntu22.04"
        command: ["nv-hostengine", "-n", "-b", "ALL"]
        ports:
        - containerPort: 5555
          hostPort: 5555
          name: dcgm
        securityContext:
          privileged: true
        volumeMounts:
        - name: nvidia-install-dir
          mountPath: /usr/local/nvidia
          readOnly: true
        resources:
          requests:
            memory: 512Mi
            cpu: 50m
          limits:
            memory: 512Mi
            cpu: 100m
      volumes:
      - name: nvidia-install-dir
        hostPath:
          path: /home/kubernetes/bin/nvidia
          type: Directory
---
# DCGM Exporter DaemonSet
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "dcgm-exporter.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "dcgm-exporter.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "dcgm-exporter.selectorLabels" . | nindent 6 }}
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        {{- include "dcgm-exporter.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      hostNetwork: true
      hostPID: true
      {{- with .Values.nodeAffinity }}
      affinity:
        nodeAffinity:
          {{- toYaml . | nindent 10 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: dcgm-exporter
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/bin/bash", "-c"]
        args:
        - hostname $NODE_NAME; dcgm-exporter --remote-hostengine-info $(NODE_IP) --collectors /etc/dcgm-exporter/counters.csv
        ports:
        - name: metrics
          containerPort: 9400
          protocol: TCP
        env:
        {{- range $key, $value := .Values.env }}
        - name: {{ $key }}
          value: "{{ $value }}"
        {{- end }}
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: LD_LIBRARY_PATH
          value: /usr/local/nvidia/lib64
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        volumeMounts:
        {{- if .Values.configMap.enabled }}
        - name: dcgm-exporter-metrics
          mountPath: "/etc/dcgm-exporter"
          readOnly: true
        {{- end }}
        {{- range .Values.hostVolumes }}
        - name: {{ .name }}
          mountPath: {{ .mountPath }}
          readOnly: {{ .readOnly }}
        {{- end }}
        livenessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /metrics
            port: metrics
          initialDelaySeconds: 5
          periodSeconds: 10
      volumes:
      {{- if .Values.configMap.enabled }}
      - name: dcgm-exporter-metrics
        configMap:
          name: {{ include "dcgm-exporter.fullname" . }}-metrics
      {{- end }}
      {{- range .Values.hostVolumes }}
      - name: {{ .name }}
        hostPath:
          path: {{ .hostPath }}
          type: DirectoryOrCreate
      {{- end }}
---
{{- if .Values.service.enable }}
apiVersion: v1
kind: Service
metadata:
  name: {{ include "dcgm-exporter.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "dcgm-exporter.labels" . | nindent 4 }}
spec:
  type: {{ .Values.service.type }}
  ports:
  - port: {{ .Values.service.port }}
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    {{- include "dcgm-exporter.selectorLabels" . | nindent 4 }}
{{- end }}
---
{{- if .Values.serviceMonitor.enabled }}
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: {{ include "dcgm-exporter.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "dcgm-exporter.labels" . | nindent 4 }}
    {{- with .Values.serviceMonitor.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  selector:
    matchLabels:
      {{- include "dcgm-exporter.selectorLabels" . | nindent 6 }}
  endpoints:
  - port: metrics
    path: /metrics
    interval: {{ .Values.serviceMonitor.interval }}
    scrapeTimeout: {{ .Values.serviceMonitor.scrapeTimeout }}
    honorLabels: true
{{- end }}