# DCGM Host Engine DaemonSet (Google's approach - ESSENTIAL for process monitoring)
# https://cloud.google.com/stackdriver/docs/managed-prometheus/exporters/nvidia-dcgm
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "dcgm-exporter.fullname" . }}-hostengine
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "dcgm-exporter.labels" . | nindent 4 }}
    component: hostengine
spec:
  selector:
    matchLabels:
      {{- include "dcgm-exporter.selectorLabels" . | nindent 6 }}
      component: hostengine
  updateStrategy:
    type: {{ .Values.daemonSet.updateStrategy.type }}
  template:
    metadata:
      labels:
        {{- include "dcgm-exporter.selectorLabels" . | nindent 8 }}
        component: hostengine
    spec:
      hostNetwork: {{ .Values.daemonSet.hostNetwork }}
      hostPID: {{ .Values.daemonSet.hostPID }}
      {{- if .Values.daemonSet.runtimeClassName }}
      runtimeClassName: {{ .Values.daemonSet.runtimeClassName }}
      {{- end }}
      {{- with .Values.nodeAffinity }}
      affinity:
        nodeAffinity:
          {{- toYaml . | nindent 10 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ .Values.containerNames.hostEngine }}
        image: "{{ .Values.hostEngine.image.repository }}:{{ .Values.hostEngine.image.tag | default (index .Chart.Annotations "dcgm-hostengine-tag") }}"
        imagePullPolicy: {{ .Values.hostEngine.image.pullPolicy }}
        command: {{ .Values.hostEngine.command | toJson }}
        ports:
        - containerPort: {{ .Values.hostEngine.port }}
          name: dcgm
          protocol: TCP
        securityContext:
          {{- toYaml .Values.hostEngine.securityContext | nindent 12 }}
        volumeMounts:
        {{- range .Values.hostVolumes }}
        - name: {{ .name }}
          mountPath: {{ .mountPath }}
          readOnly: {{ .readOnly }}
        {{- end }}
        resources:
          {{- toYaml .Values.hostEngine.resources | nindent 12 }}
        livenessProbe:
          tcpSocket:
            port: dcgm
          initialDelaySeconds: {{ .Values.hostEngine.probes.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.hostEngine.probes.liveness.periodSeconds }}
        readinessProbe:
          tcpSocket:
            port: dcgm
          initialDelaySeconds: {{ .Values.hostEngine.probes.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.hostEngine.probes.readiness.periodSeconds }}
      volumes:
      {{- range .Values.hostVolumes }}
      - name: {{ .name }}
        hostPath:
          path: {{ .hostPath }}
          type: DirectoryOrCreate
      {{- end }}
---
# DCGM Exporter DaemonSet (connects to host engine for process monitoring)
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "dcgm-exporter.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "dcgm-exporter.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "dcgm-exporter.selectorLabels" . | nindent 6 }}
  updateStrategy:
    type: {{ .Values.daemonSet.updateStrategy.type }}
  template:
    metadata:
      labels:
        {{- include "dcgm-exporter.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      hostNetwork: {{ .Values.daemonSet.hostNetwork }}
      hostPID: {{ .Values.daemonSet.hostPID }}
      {{- if .Values.daemonSet.runtimeClassName }}
      runtimeClassName: {{ .Values.daemonSet.runtimeClassName }}
      {{- end }}
      {{- with .Values.nodeAffinity }}
      affinity:
        nodeAffinity:
          {{- toYaml . | nindent 10 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ .Values.containerNames.exporter }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default (index .Chart.Annotations "dcgm-exporter-tag") }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/bin/bash", "-c"]
        args:
        - hostname $NODE_NAME; dcgm-exporter --remote-hostengine-info {{ .Values.exporter.hostEngineAddress }} --collectors /etc/dcgm-exporter/counters.csv
        ports:
        - name: metrics
          containerPort: {{ .Values.exporter.port }}
          protocol: TCP
        env:
        {{- range $key, $value := .Values.env }}
        - name: {{ $key }}
          value: "{{ $value }}"
        {{- end }}
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: LD_LIBRARY_PATH
          value: {{ .Values.paths.nvidiaLibPath }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        volumeMounts:
        {{- if .Values.configMap.enabled }}
        - name: dcgm-exporter-metrics
          mountPath: "/etc/dcgm-exporter"
          readOnly: true
        {{- end }}
        {{- range .Values.hostVolumes }}
        - name: {{ .name }}
          mountPath: {{ .mountPath }}
          readOnly: {{ .readOnly }}
        {{- end }}
        livenessProbe:
          httpGet:
            path: {{ .Values.exporter.probes.liveness.path }}
            port: metrics
          initialDelaySeconds: {{ .Values.exporter.probes.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.exporter.probes.liveness.periodSeconds }}
        readinessProbe:
          httpGet:
            path: {{ .Values.exporter.probes.readiness.path }}
            port: metrics
          initialDelaySeconds: {{ .Values.exporter.probes.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.exporter.probes.readiness.periodSeconds }}
      volumes:
      {{- if .Values.configMap.enabled }}
      - name: dcgm-exporter-metrics
        configMap:
          name: {{ include "dcgm-exporter.fullname" . }}-metrics
      {{- end }}
      {{- range .Values.hostVolumes }}
      - name: {{ .name }}
        hostPath:
          path: {{ .hostPath }}
          type: DirectoryOrCreate
      {{- end }}
---
{{- if .Values.service.enable }}
apiVersion: v1
kind: Service
metadata:
  name: {{ include "dcgm-exporter.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "dcgm-exporter.labels" . | nindent 4 }}
spec:
  type: {{ .Values.service.type }}
  ports:
  - port: {{ .Values.service.port }}
    targetPort: metrics
    protocol: TCP
    name: metrics
  selector:
    {{- include "dcgm-exporter.selectorLabels" . | nindent 4 }}
{{- end }}
---
{{- if .Values.serviceMonitor.enabled }}
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: {{ include "dcgm-exporter.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "dcgm-exporter.labels" . | nindent 4 }}
    {{- with .Values.serviceMonitor.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  selector:
    matchLabels:
      {{- include "dcgm-exporter.selectorLabels" . | nindent 6 }}
  endpoints:
  - port: metrics
    path: /metrics
    interval: {{ .Values.serviceMonitor.interval }}
    scrapeTimeout: {{ .Values.serviceMonitor.scrapeTimeout }}
    honorLabels: true
    {{- if .Values.serviceMonitor.metricRelabelings.enabled }}
    metricRelabelings:
    {{- if .Values.serviceMonitor.metricRelabelings.workflowNameExtraction.enabled }}
    # Extract workflow name from pod name for Argo workflows
    - sourceLabels: [{{ .Values.serviceMonitor.metricRelabelings.workflowNameExtraction.sourceLabel }}]
      regex: '{{ .Values.serviceMonitor.metricRelabelings.workflowNameExtraction.regex }}'
      targetLabel: {{ .Values.serviceMonitor.metricRelabelings.workflowNameExtraction.targetLabel }}
      replacement: '${1}'
    {{- end }}
    {{- end }}
{{- end }}