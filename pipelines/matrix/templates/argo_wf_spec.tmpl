{# <project_root>/templates/argo_spec.tmpl #}
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  namespace: {{namespace}}
  name: {{run_name}}
spec:
  workflowMetadata:
    labels:
      run: {% raw %}'{{ workflow.parameters.run_name }}'
      {% endraw %}
      username: "{{ username }}"
  entrypoint: "pipeline"
  arguments:
    parameters:
      - name: image
        value: "{{ image }}"
      - name: image_tag
        value: "{{ image_tag }}"
      - name: run_name
        value: "{{ image_tag }}"
      - name: neo4j_host
        value: "bolt://neo4j.neo4j.svc.cluster.local:7687"
      - name: mlflow_endpoint
        value: "http://mlflow-tracking.mlflow.svc.cluster.local:80"
      - name: openai_endpoint
        value: "https://api.openai.com/v1"
      - name: env
        value: "cloud"
      - name: release_folder_name
        value: "{{ release_folder_name }}"
  templates:
  - &_kedro_template
    name: kedro
    affinity:
      nodeAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          preference:
            matchExpressions:
            - key: gpu_node
              operator: NotIn
              values:
              - "true"
    metadata:
      labels:
        {# Add label to have an ability to remove Kedro Pods easily #}
        app: kedro-argo
    inputs:
      parameters:
      - name: kedro_nodes
      - name: num_gpus
      - name: memory_limit
      - name: memory_request
      - name: cpu_limit
      - name: cpu_request
    podSpecPatch: |
      containers:
        - name: main
          resources:
            requests:
              memory: {% raw %} "{{inputs.parameters.memory_request}}"
              {% endraw %}
              cpu: {% raw %} "{{inputs.parameters.cpu_request}}"
              {% endraw %}
              nvidia.com/gpu: {% raw %} "{{inputs.parameters.num_gpus}}"
              {% endraw %}
            limits:
              memory: {% raw %} "{{inputs.parameters.memory_limit}}"
              {% endraw %}
              cpu: {% raw %} "{{inputs.parameters.cpu_limit}}"
              {% endraw %}
              nvidia.com/gpu: {% raw %} "{{inputs.parameters.num_gpus}}"
              {% endraw %}
    container: &_kedro_container
      imagePullPolicy: Always
      image: {% raw %} "{{workflow.parameters.image}}:{{workflow.parameters.image_tag}}"
      {% endraw %}
      env:
        - name: WORKFLOW_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['workflows.argoproj.io/workflow']
        - name: RUN_NAME
          value: {% raw %} "{{workflow.parameters.run_name}}" 
          {% endraw %}
        - name: RELEASE_VERSION
          value: "{{release_version}}" 
        - name: RELEASE_FOLDER_NAME
          value: {% raw %} "{{workflow.parameters.release_folder_name}}" 
          {% endraw %}

        - name: NEO4J_HOST
          value: {% raw %} "{{workflow.parameters.neo4j_host}}" 
          {% endraw %}
        - name: MLFLOW_ENDPOINT
          value: {% raw %} "{{workflow.parameters.mlflow_endpoint}}" 
          {% endraw %}
        - name: NEO4J_USER
          valueFrom:
            secretKeyRef:
              name: matrix-secrets
              key: NEO4J_USER
        - name: NEO4J_PASSWORD
          valueFrom:
            secretKeyRef:
              name: matrix-secrets
              key: NEO4J_PASSWORD
        - name: OPENAI_ENDPOINT
          value: {% raw %} "{{workflow.parameters.openai_endpoint}}" 
          {% endraw %}
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: matrix-secrets
              key: OPENAI_API_KEY
        - name: GCP_PROJECT_ID
          valueFrom:
            configMapKeyRef:
              name: matrix-config
              key: GCP_PROJECT_ID
        - name: GCP_BUCKET
          valueFrom:
            configMapKeyRef:
              name: matrix-config
              key: GCP_BUCKET
      command: [kedro]
      args: ["run", "-p", "{{ pipeline_name }}", "-e", {% raw %}"{{workflow.parameters.env}}"{% endraw %}, "-n", {% raw %}"{{inputs.parameters.kedro_nodes}}"{% endraw %}]

  - <<: *_kedro_template
    name: neo4j
    podSpecPatch: |
      containers:
        - name: neo4j
          resources:
            requests:
              memory: {% raw %} "{{inputs.parameters.memory_request}}"
              {% endraw %}
              cpu: {% raw %} "{{inputs.parameters.cpu_request}}"
              {% endraw %}
              nvidia.com/gpu: {% raw %} "{{inputs.parameters.num_gpus}}"
              {% endraw %}
            limits:
              memory: {% raw %} "{{inputs.parameters.memory_limit}}"
              {% endraw %}
              cpu: {% raw %} "{{inputs.parameters.cpu_limit}}"
              {% endraw %}
              nvidia.com/gpu: {% raw %} "{{inputs.parameters.num_gpus}}"
              {% endraw %}
    container: 
      <<: *_kedro_container
      command: ["/bin/sh", "-c"]
      args:
        - |
            echo "Waiting for Neo4j to be ready..."
            until curl -s http://localhost:7474/ready; do
              echo "Waiting..."
              sleep 5
            done
            echo "Neo4j is ready. Starting main application..."
            NEO4J_HOST="bolt://127.0.0.1:7687" kedro run -p {{ pipeline_name }} -e {% raw %}"{{workflow.parameters.env}}"{% endraw %} -n {% raw %}"{{inputs.parameters.kedro_nodes}}"{% endraw %}
    
    volumes:
      - name: gds-key
        secret:
          secretName: gds-secret
          items:
            - key: gds_key
              path: gds-key
    sidecars:
      # Neo4j enterprise sidecar
      - name: neo4j
        image: neo4j:5.21.0-enterprise
        volumeMounts:
          - name: gds-key
            mountPath: /licences
            readOnly: true
        env:
        - name: NEO4J_AUTH
          valueFrom:
            secretKeyRef:
              name: matrix-secrets
              key: NEO4J_AUTH
        - name: NEO4J_gds_enterprise_license__file
          value: "/licences/gds-key"
        - name: NEO4J_apoc_export_file_enabled
          value: "true"
        - name: NEO4J_apoc_import_file_enabled
          value: "true"
        - name: NEO4J_apoc_import_file_use__neo4j__config
          value: "true"
        - name: NEO4J_PLUGINS
          value: '["apoc", "graph-data-science", "apoc-extended"]'
        - name: NEO4J_dbms_security_auth__minimum__password__length
          value: "4"
        - name: NEO4J_dbms_security_procedures_whitelist
          value: "gds.*, apoc.*"
        - name: NEO4J_dbms_security_procedures_unrestricted
          value: "gds.*, apoc.*"
        - name: NEO4J_db_logs_query_enabled
          value: "OFF"
        - name: NEO4J_ACCEPT_LICENSE_AGREEMENT
          value: "yes"
        - name: NEO4J_dbms_memory_heap_initial__size
          value: "100G"
        - name: NEO4J_dbms_memory_heap_max__size
          value: "120G" # TODO: How do we pass this in w/o Gi

  - name: pipeline
    dag:
      tasks:
      {% for task in pipeline_tasks %}
      - name: {{ task.name }}
        template: {{ task.get('template', 'kedro') }}
        {% if task.deps %}
        dependencies:
        {% for dep in task.deps %}
          - {{ dep }}
        {% endfor %}
        {% endif %}
        arguments:
          parameters:
          - name: pipeline
            value: {{ pipeline_name }}
          - name: kedro_nodes
            value: {{ task.nodes }}
          - name: num_gpus
            value: {{ task.resources.num_gpus }}
          - name: memory_request
            value: {{ task.resources.memory_request }}
          - name: memory_limit
            value: {{ task.resources.memory_limit }}
          - name: cpu_request
            value: {{ task.resources.cpu_request }}
          - name: cpu_limit
            value: {{ task.resources.cpu_limit }}

      {% endfor %}