{# <project_root>/templates/argo_spec.tmpl #}
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  namespace: {{namespace}}
  name: {{run_name}}
spec:
  workflowMetadata:
    labels:
      run: {% raw %}'{{ workflow.parameters.run_name }}'
      {% endraw %}
      username: "{{ username }}"
  entrypoint: __default__
  arguments:
    parameters:
      - name: image
        value: "{{ image }}"
      - name: image_tag
        value: "{{ image_tag }}"
      # - name: experiment
      #  value: "Default"
      # we use the image tag as the release version as a default
      - name: run_name
        value: "{{ image_tag }}"
      - name: neo4j_host
        value: "bolt://neo4j.neo4j.svc.cluster.local:7687"
      - name: mlflow_endpoint
        value: "http://mlflow-tracking.mlflow.svc.cluster.local:80"
      - name: openai_endpoint
        value: "https://api.openai.com/v1"
      - name: env
        value: "cloud"
  templates:
  - name: kedro
    backoff:
      duration: "1"      # Must be a string. Default unit is seconds. Could also be a Duration, e.g.: "2m", "6h", "1d"
      factor: 2
      maxDuration: "1m"  # Must be a string. Default unit is seconds. Could also be a Duration, e.g.: "2m", "6h", "1d"
    affinity:
      nodeAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: gpu_node
              operator: In
              values:
              - "true"
    metadata:
      labels:
        {# Add label to have an ability to remove Kedro Pods easily #}
        app: kedro-argo
    inputs:
      parameters:
      - name: kedro_nodes
      - name: pipeline
    container:
      imagePullPolicy: Always
      image: {% raw %} "{{workflow.parameters.image}}:{{workflow.parameters.image_tag}}"        # {{workflow...}} etc. are placeholders within the template. These placeholders will be dynamically substituted with real values when the workflow is submitted, not during the kubectl apply command.
      {% endraw %}
      resources: # limit the resources
        requests:
          memory: {{ default_execution_resources.memory_request }}
          cpu: {{ default_execution_resources.cpu_request }}
          nvidia.com/gpu: {{ default_execution_resources.num_gpus }}
        limits:
          memory: {{ default_execution_resources.memory_limit }}
          cpu: {{ default_execution_resources.cpu_limit }}
          nvidia.com/gpu: {{ default_execution_resources.num_gpus }}
      env:
        - name: WORKFLOW_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['workflows.argoproj.io/workflow']
        - name: RUN_NAME
          value: {% raw %} "{{workflow.parameters.run_name}}" 
          {% endraw %}
        #- name: EXPERIMENT
        #  value: {% raw %} "{{workflow.parameters.experiment}}" 
        #  {% endraw %}

        - name: NEO4J_HOST
          value: {% raw %} "{{workflow.parameters.neo4j_host}}" 
          {% endraw %}
        - name: MLFLOW_ENDPOINT
          value: {% raw %} "{{workflow.parameters.mlflow_endpoint}}" 
          {% endraw %}
        - name: NEO4J_USER
          valueFrom:
            secretKeyRef:
              name: matrix-secrets
              key: NEO4J_USER
        - name: NEO4J_PASSWORD
          valueFrom:
            secretKeyRef:
              name: matrix-secrets
              key: NEO4J_PASSWORD
        - name: OPENAI_ENDPOINT
          value: {% raw %} "{{workflow.parameters.openai_endpoint}}" 
          {% endraw %}
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: matrix-secrets
              key: OPENAI_API_KEY
        - name: GCP_PROJECT_ID
          valueFrom:
            configMapKeyRef:
              name: matrix-config
              key: GCP_PROJECT_ID
        - name: GCP_BUCKET
          valueFrom:
            configMapKeyRef:
              name: matrix-config
              key: GCP_BUCKET
      command: [kedro]
      args: ["run", "-p", {% raw %}"{{inputs.parameters.pipeline}}"{% endraw %}, "-e", {% raw %}"{{workflow.parameters.env}}"{% endraw %}, "-n", {% raw %}"{{inputs.parameters.kedro_nodes}}"{% endraw %}]

  - name: neo4j
    inputs:
      parameters:
      - name: kedro_nodes
      - name: pipeline
    container:
      resources: # limit the resources
        requests:
          memory: 120Gi
          cpu: 4
        limits:
          memory: 120Gi
          cpu: 16
      env:
        - name: WORKFLOW_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['workflows.argoproj.io/workflow']
        - name: RUN_NAME
          value: {% raw %} "{{workflow.parameters.run_name}}" 
          {% endraw %}
        # - name: EXPERIMENT
        #  value: {% raw %} "{{workflow.parameters.experiment}}" 
        #  {% endraw %}
        
        - name: MLFLOW_ENDPOINT
          value: {% raw %} "{{workflow.parameters.mlflow_endpoint}}" 
          {% endraw %}
        - name: NEO4J_USER
          value: "neo4j"
        - name: NEO4J_PASSWORD
          value: "admin"
        - name: GCP_PROJECT_ID
          valueFrom:
            configMapKeyRef:
              name: matrix-config
              key: GCP_PROJECT_ID
        - name: GCP_BUCKET
          valueFrom:
            configMapKeyRef:
              name: matrix-config
              key: GCP_BUCKET
        - name: OPENAI_API_KEY
          value: "foo"
        - name: OPENAI_ENDPOINT
          value: {% raw %} "{{workflow.parameters.openai_endpoint}}" 
          {% endraw %}
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: matrix-secrets
              key: OPENAI_API_KEY
      imagePullPolicy: Always
      image: {% raw %} "{{workflow.parameters.image}}:{{workflow.parameters.image_tag}}" {% endraw %}
      
      command: ["/bin/sh", "-c"]
      args:
        - |
          echo "Waiting for Neo4j to be ready..."
          until curl -s http://localhost:7474/ready; do
            echo "Waiting..."
            sleep 5
          done
          echo "Neo4j is ready. Starting main application..."
          kedro run -p {% raw %}"{{inputs.parameters.pipeline}}"{% endraw %} -e {% raw %}"{{workflow.parameters.env}}"{% endraw %} -n {% raw %}"{{inputs.parameters.kedro_nodes}}"{% endraw %}
    
    sidecars:
      # Neo4j enterprise sidecar
      - name: neo4j
        image: neo4j:5.21.0-enterprise
        env:
        - name: NEO4J_AUTH
          value: "neo4j/admin"
        - name: NEO4J_apoc_export_file_enabled
          value: "true"
        - name: NEO4J_apoc_import_file_enabled
          value: "true"
        - name: NEO4J_apoc_import_file_use__neo4j__config
          value: "true"
        - name: NEO4J_PLUGINS
          value: '["apoc", "graph-data-science", "apoc-extended"]'
        - name: NEO4J_dbms_security_auth__minimum__password__length
          value: "4"
        - name: NEO4J_dbms_security_procedures_whitelist
          value: "gds.*, apoc.*"
        - name: NEO4J_dbms_security_procedures_unrestricted
          value: "gds.*, apoc.*"
        - name: NEO4J_db_logs_query_enabled
          value: "OFF"
        - name: NEO4J_ACCEPT_LICENSE_AGREEMENT
          value: "yes"
  {% for pipeline, tasks in pipelines.items() %}
  - name: {{ pipeline }}
    dag:
      tasks:
      {% for task in tasks %}
      - name: {{ task.name }}
        template: {{ task.get('template', 'kedro') }}
        {% if task.resources %}
        container:  
          resources: # limit the resources
            requests:
              memory: {{ task.resources.memory_request }}
              cpu: {{ task.resources.cpu_request }}
              nvidia.com/gpu: {{ task.resources.num_gpus }}
            limits:
              memory: {{ task.resources.memory_limit }}
              cpu: {{ task.resources.cpu_limit }}
              nvidia.com/gpu: {{ task.resources.num_gpus }}
        {% endif %}
        {% if task.get('use_gpus', False) %}
        affinity:
          nodeAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
              - key: gpu_node
                operator: In
                values:
                - "true"
        {% endif %}
        {% if task.deps %}
        dependencies:
        {% for dep in task.deps %}
          - {{ dep }}
        {% endfor %}
        {% endif %}
        arguments:
          parameters:
          - name: pipeline
            value: {{ pipeline }}
          - name: kedro_nodes
            value: {{ task.nodes }}
      {% endfor %}
  {% endfor %}