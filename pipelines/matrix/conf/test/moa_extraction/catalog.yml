# Neo4j databases with different names for testing

"moa_extraction.input_nodes.{num_hops}_hop":
  type: matrix.datasets.neo4j.Neo4JSparkDataset
  database: test-analytics-{num_hops}-hop
  url: ${globals:neo4j.host}
  credentials: neo4j_credentials
  save_args:
    mode: overwrite
    script: >
      CREATE CONSTRAINT IF NOT EXISTS FOR (n:Entity) REQUIRE n.id IS UNIQUE;
    query: > 
      CREATE (n:Entity {{id: event.id, kg_sources: event.kg_sources}})
      WITH event, n
      CALL apoc.create.addLabels(n, [event.label]) YIELD node
      CALL apoc.create.setProperties(n, event.property_keys, event.property_values) YIELD node AS n2
      CALL apoc.create.setProperties(n, event.array_property_keys, event.array_property_values) YIELD node AS n3
      RETURN node

"moa_extraction.input_edges.{num_hops}_hop":
  type: matrix.datasets.neo4j.Neo4JSparkDataset
  database: test-analytics-{num_hops}-hop
  url: ${globals:neo4j.host}
  credentials: neo4j_credentials
  save_args:
    query: > 
      MATCH (subject:Entity {{id: event.subject}}), (object:Entity {{id: event.object}})
      WITH subject, object, event
      CALL apoc.create.relationship(subject, event.label, {{kg_sources: event.kg_sources}}, object) YIELD rel
      RETURN rel