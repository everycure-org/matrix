matrix_generation.matrix_generation_options:
  batch_by: # Column to batch over when making predictions
    - target 

matrix_generation.reporting_node:
  plots:
    - object : matrix.pipelines.matrix_generation.reporting_plots.SingleScoreHistogram
      name : "log_histogram_treat_score"
      score_col : *score-col
      is_log_y_scale : True

    - object : matrix.pipelines.matrix_generation.reporting_plots.MultiScoreHistogram
      name : "log_histograms_all_scores"
      score_cols_lst :
        - *score-col
        - *not_treat_score_col_name
        - *unknown_score_col_name
      is_log_y_scale : True

    - object: matrix.pipelines.matrix_generation.reporting_plots.SingleScoreLinePlot
      name : "log_line_plot_treat_score"
      score_col : *score-col
      is_log_y_scale : True

  tables:
    - object : matrix.pipelines.matrix_generation.reporting_tables.MatrixRunInfo 
      name : "matrix_run_info" 
      workflow_id: ${oc.env:WORKFLOW_ID, local}
      run_name: ${globals:run_name}
      mlflow_link: ${globals:mlflow_url}
      git_sha: ${globals:git_sha}
      release_version: ${globals:versions.release}
      versions: ${globals:data_sources}

    - object : matrix.pipelines.matrix_generation.reporting_tables.TopPairs
      name : "top_pairs_treat_score" 
      n_reporting: *n_reporting
      score_col : *score-col

    - object : matrix.pipelines.matrix_generation.reporting_tables.TopPairs
      name : "top_pairs_not_treat_score" 
      n_reporting: *n_reporting
      score_col : *score-col-not-treat

    - object : matrix.pipelines.matrix_generation.reporting_tables.TopPairs 
      name : "top_pairs_unknown_score" 
      n_reporting: *n_reporting
      score_col : *score-col-unknown

    - object : matrix.pipelines.matrix_generation.reporting_tables.RankToScore
      name : "rank_to_score"
      ranks_lst :
        - 1000
        - 10000
        - 100000
        - 1000000
      score_col : *score-col-unknown

    - object : matrix.pipelines.matrix_generation.reporting_tables.TopFrequentFlyers
      name : "top_frequent_flyer_drugs" 
      specific_col : "source"
      specific_entity_name : "Drug"
      count_in_n_lst : # Count occurrence in top n for these values of n
        - 1000
        - 10000
        - 100000
      # Statistic to sort by. 
      # Choose from: "count_in_{n}" for value of n  in count_in_n_lst, "mean", "root_mean_squared" or "median"
      sort_by_col: "count_in_10000" 
      score_col : *score-col

    - object : matrix.pipelines.matrix_generation.reporting_tables.TopFrequentFlyers
      name : "top_frequent_flyer_diseases" 
      specific_col : "target"
      specific_entity_name : "Disease"
      count_in_n_lst : # Count occurrence in top n for these values of n
        - 1000
        - 10000
        - 100000
      # Statistic to sort by. 
      # Choose from: "count_in_{n}" for value of n  in count_in_n_lst, "mean", "root_mean_squared" or "median"
      sort_by_col: "count_in_10000" 
      score_col : *score-col


matrix_generation.n_reporting: 10000 &n_reporting # Number of items "top pairs" reporting table
matrix_generation.treat_score_col_name: &score-col "treat score"
matrix_generation.not_treat_score_col_name: &score-col-not-treat "not treat score"
matrix_generation.unknown_score_col_name:  &score-col-unknown "unknown score"
