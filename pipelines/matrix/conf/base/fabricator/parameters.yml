fabricator.rtx_kg2:
  nodes:
    num_rows: 150
    columns:
      id:ID:
        type: generate_unique_id
        prefix: "RTX:"
      name:
        type: generate_unique_id
        prefix: name_
      all_names:string[]:
        type: faker
        provider: name
      category:
        type: generate_values
        sample_values:
          - biolink:Drug
          - biolink:Disease
          - biolink:Gene
          - biolink:ChemicalSubstance
          - biolink:Protein
      all_categories:string[]:
        type: row_apply
        list_of_values: [nodes.category]
        # NOTE: This ensures the full path from root to child is added in the categories column
        row_func: matrix.pipelines.fabricator.generators.get_ancestors_for_category_delimited
        row_func_kwargs:
          delimiter: "\u01c2"
        resize: True
        seed: 590590
      iri:
        type: faker
        provider: url

      description:
        type: generate_unique_id
        prefix: description_
      equivalent_curies:string[]:
        type: faker
        provider: name
      publications:string[]:
        type: generate_random_arrays
        delimiter: "\u01c2"
        sample_values:
          - "PMID:12345678"
          - "DOI:10.1234/example.5678"
      international_resource_identifier:
        type: faker
        provider: url
      :LABEL:
        type: faker
        provider: name
      date_discovered:
        type: generate_dates
        start_dt: 2010-01-01
        end_dt: 2020-01-01
        freq: M

  edges:
    num_rows: 500
    columns:
      # NOTE: This is a rather complex syntax, but is results in a "subject"
      # column that contains random values from the nodes table defined above.
      subject:
        type: row_apply
        list_of_values: [ nodes.id:ID ]
        row_func: "lambda *args: args[0]"
        resize: True
        seed: 590590
      # NOTE: This is a rather complex syntax, but is results in an "object"
      # column that contains random values from the nodes table defined above.
      object:
        type: row_apply
        list_of_values: [ nodes.id:ID ]
        row_func: "lambda *args: args[0]"
        resize: True
        seed: 49494
      predicate:
        type: generate_values
        sample_values:
          - biolink:treats
          - biolink:interacts_with
          - biolink:affects
          - biolink:subclass_of
          - biolink:is_nearby_variant_of
      knowledge_source:string[]:
        type: generate_random_arrays
        delimiter: "\u001f"
        sample_values:
          - infores:semmeddb
          - infores:gtex
          - infores:ubergraph
          - infores:snpeff
      # For version 2.10
      # primary_knowledge_source:
      #   type: faker
      #   provider: name
      publications:string[]:
        type: generate_random_arrays
        delimiter: "\u01c2"
        sample_values:
          - "PMID:12345678"
          - "DOI:10.1234/example.5678"
      subject_aspect_qualifier:
        type: faker
        provider: word
      subject_direction_qualifier:
        type: generate_values
        sample_values:
          - "increased"
          - "decreased"
      object_aspect_qualifier:
        type: faker
        provider: word
      object_direction_qualifier:
        type: generate_values
        sample_values:
          - "increased"
          - "decreased"

  # NOTE: Lets see if this is needed later on
  pubmed_ids_mapping:
    num_rows: 50
    columns:
      curie:
          type: row_apply
          list_of_values: [nodes.id:ID]
          row_func: "lambda *args: args[0]"
          resize: True
          seed: 590590
      pmids:
          type: generate_random_arrays
          sample_values:
            - 12345678
            - 678
            - 195959
            - 5059595

  # NOTE: Fabricated drug and disease lists can contain nodes which are not in the drug and disease categories resp.
  drug_list:
    num_rows: 20
    columns:
      curie: 
        type: column_apply
        list_of_values: [nodes.id:ID, nodes.category]
        column_func: matrix.pipelines.fabricator.generators.filter_by_category
        column_func_kwargs:
          category: "biolink:Drug"
        resize: True
        seed: 6850
      name: 
        type: row_apply
        list_of_values: [nodes.id:ID, nodes.name]
        row_func: "lambda *args: args[1]"
        resize: True
        seed: 6850
      single_ID: 
        type: row_apply
        list_of_values: [nodes.id:ID, nodes.name]
        row_func: "lambda *args: args[0]"
        resize: True
        seed: 6850
      ID_Label: 
        type: row_apply
        list_of_values: [nodes.id:ID, nodes.name]
        row_func: "lambda *args: args[1]"
        resize: True
        seed: 6850
      is_steroid: 
        type: generate_values
        sample_values: 
          - True
          - False
      is_antimicrobial: 
        type: generate_values
        sample_values: 
          - True
          - False
      is_glucose_regulator: 
        type: generate_values
        sample_values: 
          - True
          - False
      is_chemotherapy: 
        type: generate_values
        sample_values: 
          - True
          - False
      available_USA:
        type: generate_values
        sample_values: 
          - DISCONTINUED
          - RX
          - AVAILABLE
      
  disease_list:
    num_rows: 30
    columns:
      curie: 
        type: column_apply
        list_of_values: [nodes.id:ID, nodes.category]
        column_func: matrix.pipelines.fabricator.generators.filter_by_category
        column_func_kwargs:
          category: "biolink:Disease"
        resize: True
        seed: 95690
      name: 
        type: row_apply
        list_of_values: [nodes.id:ID, nodes.name]
        row_func: "lambda *args: args[1]"
        resize: True
        seed: 95690
      category_class: 
        type: row_apply
        list_of_values: [nodes.id:ID, nodes.name]
        row_func: "lambda *args: args[0]"
        resize: True
        seed: 65690
      label: 
        type: row_apply
        list_of_values: [nodes.id:ID, nodes.name]
        row_func: "lambda *args: args[1]"
        resize: True
        seed: 65690
      is_cancer: 
        type: generate_values
        sample_values: 
          - True
          - False
      is_pathogen_caused: 
        type: generate_values
        sample_values: 
          - True
          - False
      is_glucose_dysfunction: 
        type: generate_values
        sample_values: 
          - True
          - False
      tag_existing_treatment: 
        type: generate_values
        sample_values: 
          - True
          - False
      tag_QALY_lost: 
        type: generate_values
        sample_values: 
          - LOW
          - MEDIUM
          - NONE
          - VERY HIGH
          - HIGH
          - MODERATE
        

  clinical_trials:
    num_rows: 50
    columns:
      drug_kg_curie:
        type: row_apply
        list_of_values: [drug_list.curie, drug_list.name]
        row_func: "lambda *args: args[0]"
        resize: True
        seed: 40599
      drug_name:
        type: row_apply
        list_of_values: [drug_list.curie, drug_list.name]
        row_func: "lambda *args: args[1]"
        resize: True
        seed: 40599
      disease_kg_curie:
        type: row_apply
        list_of_values: [disease_list.curie, disease_list.name]
        row_func: "lambda *args: args[0]"
        resize: True
        seed: 30599
      disease_name:
        type: row_apply
        list_of_values: [disease_list.curie, disease_list.name]
        row_func: "lambda *args: args[1]"
        resize: True
        seed: 30599
      significantly_better: # NOTE: Unlike the real data, the fabricated data can have value 1 in more than one column.  
        type: generate_values
        sample_values: [1, 0]
      non_significantly_better:
        type: generate_values
        sample_values: [1, 0]
      non_significantly_worse:
        type: generate_values
        sample_values: [1, 0]
      significantly_worse:
        type: generate_values
        sample_values: [1, 0]

fabricator.robokop:
  # robokop nodes definition
  nodes:
    num_rows: 150
    columns:
      id:ID:
        type: generate_unique_id
        prefix: "ROBO:"
      name:string:
        type: generate_unique_id
        prefix: "rs"
      category:LABEL:
        type: generate_random_arrays
        delimiter: "\x1F"
        sample_values:
            - biolink:Entity
            - biolink:ThingWithTaxon
            - biolink:BiologicalEntity
            - biolink:Drug
            - biolink:Disease
            - biolink:SequenceVariant
            - biolink:NamedThing
            - biolink:OntologyClass
            - biolink:PhysicalEssence
            - biolink:PhysicalEssenceOrOccurrent
            - biolink:GenomicEntity
            - biolink:OrganismTaxon
      description:string:
        type: faker
        provider: sentence
      equivalent_identifiers:string[]:
        type: generate_random_arrays
        delimiter: "\x1F"
        sample_values:
          - NCBITaxon:2
          - UMLS:C0004611
          - MESH:D001419
          - HGVS:NG_029620.1:g.16582A>G
          - HGVS:CM000669.1:g.149423729A>G
          - ROBO_VARIANT:HG38|7|149726637|149726638|A|G
          - HGVS:CM000669.2:g.149726638A>G
          - HGVS:NC_000007.12:g.149054662A>G
      information_content:float:
        type: faker
        provider: pydecimal
        provider_args:
          left_digits: 3
          right_digits: 2
          positive: True
          min_value: 1
          max_value: 100
      publications:string[]:
        type: generate_random_arrays
        delimiter: "\u001f"
        sample_values:
          - "PMID:12345678"
          - "DOI:10.1234/example.5678"
      #all_categories:
      #  type: generate_random_arrays
      #  delimiter: "\u001f"
      #  sample_values:
      #    - "biolink:Entity"
      #    - "biolink:ThingWithTaxon"
      #    - "biolink:BiologicalEntity"
      #    - "biolink:SequenceVariant"
      #label:
      #  type: generate_random_arrays
      #  delimiter: "\u001f"
      #  sample_values:
      #    - "biolink:NucleicAcidEntity"
      #    - "biolink:MolecularEntity"
      #    - "biolink:ChemicalOrDrugOrTreatment"

  # robokop edges definition
  edges:
    num_rows: 500
    columns:
      # NOTE: This is a rather complex syntax, but is results in a "subject"
      # column that contains random values from the nodes table defined above.
      subject:START_ID:
        type: row_apply
        list_of_values: [ nodes.id:ID ]
        row_func: "lambda *args: args[0]"
        resize: True
        seed: 590590
      predicate:TYPE:
        type: generate_values
        sample_values:
          - biolink:treats
          - biolink:interacts_with
          - biolink:affects
          - biolink:subclass_of
          - biolink:is_nearby_variant_of
      object:END_ID:
        type: row_apply
        list_of_values: [ nodes.id:ID ]
        row_func: "lambda *args: args[0]"
        resize: True
        seed: 49494
      primary_knowledge_source:string:
        type: generate_values
        sample_values:
          - infores:semmeddb
          - infores:gtex
          - infores:ubergraph
          - infores:snpeff
      knowledge_level:string:
        type: generate_values
        sample_values:
          - prediction
          - knowledge_assertion
      agent_type:string:
        type: generate_values
        sample_values:
          - computational_model
          - manual_agent
      publications:string[]:
        type: generate_random_arrays
        delimiter: "\u001f"
        sample_values:
          - "PMID:12345678"
          - "DOI:10.1234/example.5678"
      #p_value:float[]:
      #  type: faker
      #  provider: pyfloat
      #  provider_args:
      #    left_digits: 1
      #    right_digits: 6
      #    positive: True
      #    min_value: 0.000001
      #    max_value: 0.1
      object_aspect_qualifier:string:
        type: faker
        provider: word
      object_direction_qualifier:string:
        type: generate_values
        sample_values:
          - increased
          - decreased
      qualified_predicate:string:
        type: generate_values
        sample_values:
          - biolink:causes
          - biolink:treats
      aggregator_knowledge_source:string[]:
        type: generate_random_arrays
        delimiter: "\u001f"
        sample_values:
          - infores:aggregator1
          - infores:aggregator2
          - infores:aggregator3

fabricator.ec_medical_kg:
  nodes:
    num_rows: 10
    columns:
      id: 
        type: generate_unique_id
        prefix: ec_medical_node_
    
      name:
        type: faker
        provider: name

      description:
        type: faker
        provider: sentence

      category:
        type: generate_values
        sample_values:
          - biolink:Drug
          - biolink:Disease

  edges:
    num_rows: 50
    columns:
      subject:
        type: row_apply
        list_of_values: [nodes.id]
        row_func: "lambda *args: args[0]"
        resize: True
        seed: 340590
      
      object:
        type: row_apply
        list_of_values: [nodes.id]
        row_func: "lambda *args: args[0]"
        resize: True
        seed: 57000
      
      predicate:
        type: generate_values
        sample_values:
          - biolink:treats
          - biolink:interacts_with
      
      knowledge_source:
        type: faker
        provider: name


# Empty DrugMechDB and normalized DrugMechDB entities for TestPathMapper class (for path mapping in the test environment)
fabricator.drug_mech_db:
  paths: None     

fabricator.drugmechdb_entities: 
  entities:
    num_rows: 10
    columns:
      DrugMechDB_ID: 
        type: generate_unique_id
        prefix: drugmechdb_entity_
    
      DrugMechDB_name:
        type: faker
        provider: name

      mapped_ID:
        type: generate_unique_id
        prefix: resolved_entity_
