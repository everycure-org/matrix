fabricator.rtx_kg2:
  nodes:
    num_rows: 150
    columns:
      id:
        type: generate_unique_id
        prefix: rtx_kg_node_

      name:
        type: faker
        provider: name
      category:
        type: generate_values
        sample_values:
          - biolink:Drug
          - biolink:Disease
      all_names:
        type: faker
        provider: name
      all_categories:
        type: generate_values
        sample_values:
          - biolink:Drug
          - biolink:Disease
          - biolink:Gene
          - biolink:ChemicalSubstance
          - biolink:Protein
          - biolink:SmallMolecule
      iri:
        type: faker
        provider: url
      description:
        type: faker
        provider: sentence
      equivalent_curies:
        type: faker
        provider: name
      publications:
        type: faker
        provider: name
      label:
        type: faker
        provider: name
      date_discovered:
        type: generate_dates
        start_dt: 2010-01-01
        end_dt: 2020-01-01
        freq: M

  edges:
    num_rows: 500
    columns:
      # NOTE: This is a rather complex syntax, but is results in a "subject"
      # column that contains random values from the nodes table defined above.
      subject:
        type: row_apply
        list_of_values: [nodes.id]
        row_func: "lambda *args: args[0]"
        resize: True
        seed: 590590
      # NOTE: This is a rather complex syntax, but is results in an "object"
      # column that contains random values from the nodes table defined above.
      object:
        type: row_apply
        list_of_values: [nodes.id]
        row_func: "lambda *args: args[0]"
        resize: True
        seed: 49494
      predicate:
        type: generate_values
        sample_values:
          - biolink:treats
          - biolink:interacts_with
      knowledge_source:
        type: faker
        provider: name

fabricator.robokop:
  # robokop nodes definition
  nodes:
    num_rows: 150
    columns:
      id:
        type: generate_unique_id
        prefix: "CAID:"
      name:
        type: generate_unique_id
        prefix: "rs"
      category:
        type: generate_values
        sample_values:
          - "biolink:Entity,biolink:ThingWithTaxon,biolink:BiologicalEntity,biolink:SequenceVariant,biolink:NamedThing,biolink:OntologyClass,biolink:PhysicalEssence,biolink:PhysicalEssenceOrOccurrent,biolink:GenomicEntity"
          - "biolink:OrganismTaxon,biolink:NamedThing"
      equivalent_identifiers:
        type: generate_values
        sample_values:
          - "HGVS:NG_029620.1:g.16582A>G,HGVS:CM000669.1:g.149423729A>G,ROBO_VARIANT:HG38|7|149726637|149726638|A|G,HGVS:CM000669.2:g.149726638A>G,HGVS:NC_000007.12:g.149054662A>G"
          - "NCBITaxon:2,UMLS:C0004611,MESH:D001419"
      information_content:
        type: faker
        provider: pydecimal
        provider_args:
          left_digits: 3
          right_digits: 2
          positive: True
          min_value: 0
          max_value: 100
      description:
        type: faker
        provider: sentence
        provider_args:
          nb_words: 10
      cd_formula:
        type: faker
        provider: bothify
        provider_args:
          text: "?#?#?#?#?#?#"
      cd_molweight:
        type: faker
        provider: pydecimal
        provider_args:
          left_digits: 4
          right_digits: 3
          positive: True
          min_value: 0
          max_value: 1000
      clogp:
        type: faker
        provider: pydecimal
        provider_args:
          left_digits: 1
          right_digits: 1
          min_value: -1
          max_value: 1
      alogs:
        type: faker
        provider: pydecimal
        provider_args:
          left_digits: 2
          right_digits: 2
          min_value: -10
          max_value: 10
      tpsa:
        type: faker
        provider: pydecimal
        provider_args:
          left_digits: 4
          right_digits: 2
          positive: True
          min_value: 0
          max_value: 1000
      lipinski:
        type: faker
        provider: pyint
        provider_args:
          min_value: 0
          max_value: 10
      mrdef:
        type: faker
        provider: bothify
        provider_args:
          text: "?#?#?#?#?#?#"
      arom_c:
        type: faker
        provider: pyint
        provider_args:
          min_value: 0
          max_value: 10
      sp3_c:
        type: faker
        provider: pyint
        provider_args:
          min_value: 0
          max_value: 10
      sp2_c:
        type: faker
        provider: pyint
        provider_args:
          min_value: 0
          max_value: 10
      sp_c:
        type: faker
        provider: pyint
        provider_args:
          min_value: 0
          max_value: 10
      halogen:
        type: faker
        provider: pyint
        provider_args:
          min_value: 0
          max_value: 10
      hetero_sp2_c:
        type: faker
        provider: pyint
        provider_args:
          min_value: 0
          max_value: 10
      rotb:
        type: faker
        provider: pyint
        provider_args:
          min_value: 0
          max_value: 10
      o_n:
        type: faker
        provider: pyint
        provider_args:
          min_value: 0
          max_value: 10
      oh_nh:
        type: faker
        provider: pyint
        provider_args:
          min_value: 0
          max_value: 10
      smiles:
        type: faker
        provider: bothify
        provider_args:
          text: "?#?#?#?#?#?#"
      rgb:
        type: faker
        provider: pyint
        provider_args:
          min_value: 0
          max_value: 100
      status:
        type: faker
        provider: bothify
        provider_args:
          text: "?#?#?#?#?#?#"
      fda_labels:
        type: faker
        provider: pyint
        provider_args:
          min_value: 0
          max_value: 100
      definition:
        type: faker
        provider: sentence
      url:
        type: faker
        provider: url
      locus_group:
        type: faker
        provider: sentence
      symbol:
        type: faker
        provider: bothify
        provider_args:
          text: "?#?"
      location:
        type: faker
        provider: bothify
        provider_args:
          text: "##?##.#"
      taxon:
        type: generate_unique_id
        prefix: "NCBITaxon:"
      NCBITaxon:
        type: generate_unique_id

  # robokop edges definition
  edges:
    num_rows: 500
    columns:
      # NOTE: This is a rather complex syntax, but is results in a "subject"
      # column that contains random values from the nodes table defined above.
      subject:
        type: row_apply
        list_of_values: [ nodes.id ]
        row_func: "lambda *args: args[0]"
        resize: True
        seed: 590590
      predicate:
        type: generate_values
        sample_values:
          - biolink:treats
          - biolink:interacts_with
      # NOTE: This is a rather complex syntax, but is results in an "object"
      # column that contains random values from the nodes table defined above.
      object:
        type: row_apply
        list_of_values: [ nodes.id ]
        row_func: "lambda *args: args[0]"
        resize: True
        seed: 49494
      primary_knowledge_source:
        type: faker
        provider: lexify
        provider_args:
          text: "infores:???????"
      knowledge_level:
        type: generate_values
        sample_values:
          - knowledge_assertion
          - logical_entailment
          - prediction
          - statistical_association
          - observation
          - not_provided
      agent_type:
        type: generate_values
        sample_values:
          - manual_agent
          - automated_agent
          - data_analysis_pipeline
          - computational_model
          - text_mining_agent
          - manual_validation_of_automated_agent
          - not_provided
      publications:
        type: faker
        provider: numerify
        provider_args:
          text: "PMID:########"
      p_value:
        type: faker
        provider: pyfloat
        provider_args:
          min_value: -1000
          max_value: 1000
      ligand:
        type: faker
        provider: numerify
        provider_args:
          text: "PUBCHEM.COMPOUND:########"
      protein:
        type: faker
        provider: numerify
        provider_args:
          text: "UniProtKB:P######"
      affinity_parameter:
        type: faker
        provider: numerify
        provider_args:
          text: "pIC##"
      supporting_affinities:
        type: faker
        provider: pydecimal
        provider_args:
          left_digits: 1
          right_digits: 2
          positive: True
          min_value: 0
          max_value: 10
      affinity:
        type: faker
        provider: pyfloat
        provider_args:
          min_value: -1000
          max_value: 1000
      object_aspect_qualifier:
        type: generate_values
        sample_values:
          - abundance
          - activity
          - activity_or_abundance
          - expression
          - splicing
          - transport
      object_direction_qualifier:
        type: generate_values
        sample_values:
          - decreased
          - downregulated
          - increased
          - upregulated
      qualified_predicate:
        type: generate_values
        sample_values:
          - biolink:causes
      Coexpression:
        type: faker
        provider: numerify
        provider_args:
          text: "###"
      Coexpression_transferred:
        type: faker
        provider: numerify
        provider_args:
          text: "###"
      Experiments:
        type: faker
        provider: numerify
        provider_args:
          text: "###"
      Experiments_transferred:
        type: faker
        provider: numerify
        provider_args:
          text: "###"
      Database:
        type: faker
        provider: numerify
        provider_args:
          text: "###"
      Database_transferred:
        type: faker
        provider: numerify
        provider_args:
          text: "###"
      Textmining:
        type: faker
        provider: numerify
        provider_args:
          text: "###"
      Textmining_transferred:
        type: faker
        provider: numerify
        provider_args:
          text: "###"
      Cooccurance:
        type: faker
        provider: numerify
        provider_args:
          text: "#"
      Combined_score:
        type: faker
        provider: numerify
        provider_args:
          text: "###"
      species_context_qualifier:
        type: faker
        provider: numerify
        provider_args:
          text: "NCBITaxon:####"
      hetio_source:
        type: generate_values
        sample_values:
          - "DisGeNET"
          - "NCBI gene2go"
      tmkp_confidence_score:
        type: faker
        provider: pyfloat
        provider_args:
          positive: True
          min_value: 0
          max_value: 2
      sentences:
        type: faker
        provider: sentence
        provider_args:
          nb_words: 10
      tmkp_ids:
        type: faker
        provider: bothify
        provider_args:
          text: "tmkp:#?#?#?#?#?#?#?#?#?#?#?#?#?#?#?#?"
      detection_method:
        type: faker
        provider: bothify
        provider_args:
          text: "MI:####"
      Homology:
        type: faker
        provider: bothify
        provider_args:
          text: "MI:####"
      expressed_in:
        type: faker
        provider: bothify
        provider_args:
          text: "UBERON:#######"
      slope:
        type: faker
        provider: pyfloat
        provider_args:
          left_digits: 1
          right_digits: 6
          min_value: -2
          max_value: 2
      pubchem_assay_ids:
        type: faker
        provider: bothify
        provider_args:
          text: "PUBCHEM.AID:aid#######"
      patent_ids:
        type: faker
        provider: bothify
        provider_args:
          text: "PATENT:US########"
      aggregator_knowledge_source:
        type: generate_values
        sample_values:
          - infores:drugcentral
          - infores:hetionet
          - infores:monarchinitiative
          - infores:pharos
      FAERS_llr:
        type: faker
        provider: pyfloat
        provider_args:
          left_digits: 2
          right_digits: 3
          min_value: 0
          max_value: 30
      score:
        type: faker
        provider: pyfloat
        provider_args:
          right_digits: 3
          min_value: 0
          max_value: 1
      description:
        type: faker
        provider: sentence
        provider_args:
          nb_words: 10
      NCBITaxon:
        type: faker
        provider: bothify
        provider_args:
          text: "NCBITaxon:####"
      Fusion:
        type: faker
        provider: bothify
        provider_args:
          text: "#?#?#?#?#?#"
      affinityParameter:
        type: faker
        provider: bothify
        provider_args:
          text: "#?#?#?#?#?#"
      onset_qualifier:
        type: faker
        provider: bothify
        provider_args:
          text: "#?#?#?#?#?#"
      frequency_qualifier:
        type: faker
        provider: bothify
        provider_args:
          text: "#?#?#?#?#?#"
      stage_qualifier:
        type: faker
        provider: bothify
        provider_args:
          text: "#?#?#?#?#?#"
      primaryTarget:
        type: faker
        provider: pybool
      endogenous:
        type: faker
        provider: pybool
      sex_qualifier:
        type: faker
        provider: lexify
        provider_args:
          text: "?????"
      drugmechdb_path_id:
        type: faker
        provider: lexify
        provider_args:
          text: "?????"
      complex_context:
        type: faker
        provider: lexify
        provider_args:
          text: "?????"

fabricator.ec_medical_kg:
  nodes:
    num_rows: 10
    columns:
      id: 
        type: generate_unique_id
        prefix: ec_medical_node_
    
      name:
        type: faker
        provider: name

      description:
        type: faker
        provider: sentence

      category:
        type: generate_values
        sample_values:
          - biolink:Drug
          - biolink:Disease

  edges:
    num_rows: 50
    columns:
      subject:
        type: row_apply
        list_of_values: [nodes.id]
        row_func: "lambda *args: args[0]"
        resize: True
        seed: 340590
      
      object:
        type: row_apply
        list_of_values: [nodes.id]
        row_func: "lambda *args: args[0]"
        resize: True
        seed: 57000
      
      predicate:
        type: generate_values
        sample_values:
          - biolink:treats
          - biolink:interacts_with
      
      knowledge_source:
        type: faker
        provider: name
