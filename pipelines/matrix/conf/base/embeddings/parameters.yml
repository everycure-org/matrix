# Neo4J graph database configuration. Used to orchestrate
# queries into Neo4j.
embeddings.gdb:
  object: matrix.pipelines.embeddings.nodes.GraphDB
  endpoint: ${globals:neo4j.host}
  database: analytics
  auth:
    -  ${globals:neo4j.user}
    -  ${globals:neo4j.password}

# Establishes connection to localized mock GenAI API for
# testing purposes.
# https://neo4j.com/labs/apoc/5/ml/openai/
embeddings.ai_config:
  api_key: ${globals:openai.api_key}
  attribute: &_property embedding
# https://platform.openai.com/docs/guides/embeddings/faq
# OpenAI embeddings support batching, up to 8000 tokens.
  batch_size: 500
  endpoint: ${globals:openai.endpoint}
  model: text-embedding-3-small
  concurrency: 50

# Attributes used as input features to compute
# node embeddings.
embeddings.node.features: ["category", "name"]

# Defines strategy used to reduce dimensions of the GenAI
# generated node embeddings.
# https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.ml.feature.PCA.html
embeddings.dimensionality_reduction:
  skip: false # Set to true to skip PCA
  input: *_property
  output: &_pca_property 'pca_embedding'
  transformer:
    object: pyspark.ml.feature.PCA
    k: 100

# FUTURE: This is a highly temp. solution that serves as PoC of leveraging Neo4J's
# AI functionality. If works as expected, we'll do a refinement step to clean this up.
embeddings.gds:
  object: matrix.pipelines.embeddings.nodes.GraphDS
  endpoint: ${globals:neo4j.host}
  database: analytics
  auth:
    -  ${globals:neo4j.user}
    -  ${globals:neo4j.password}

# Defines strategy used to compute topological embeddings,
# all nodes and relationships in our KG are projected, along with
# the PCA feature. The graphSage algorithm is hereafter applied
# and the result is written back to the KG.
# 
# Sources:
#   - https://neo4j.com/docs/graph-data-science/current/management-ops/graph-creation/graph-project/
#   - https://neo4j.com/docs/graph-data-science-client/current/graph-object/
#   - https://neo4j.com/docs/graph-data-science-client/current/model-object/
#   - https://neo4j.com/docs/graph-data-science-client/current/algorithms/ 
# 
embeddings.topological:
  projection:
    graphName: embeddings
    nodeProjection:
      Entity:
        label: 'Entity'
        properties: embedding
    relationshipProjection: '*'
    configuration:
      relationshipProperties: 
        include_in_graphsage:
          property: include_in_graphsage
          defaultValue: 1
  filtering:
    graphName: filtered_embeddings 
    args:
      node_filter: '*'
      relationship_filter: r.include_in_graphsage = 1.0
  estimator:
    model: graphSage
    args:
      modelName: topological_embeddings
      featureProperties: [*_pca_property]
      concurrency: 4
      # FUTURE: We're currently leveraging a binary weighting strategy to exclude  
      # certain relationships. Another option could be to leverage filtering:
      # https://neo4j.com/docs/graph-data-science/current/management-ops/graph-creation/graph-filter/
      # relationshipWeightProperty: *_weight_attribute
      maxIterations: 1 # TODO: Revert
      # Chunyu: 512
      embeddingDimension: 512
      # Chunyu: 200k
      batchSize: 20000
      epochs: 1 # TODO: Revert
      searchDepth: 100
      # Chunyu
      # learningRate: 0.001
      learningRate: 0.001
  write_property: topological_embedding
