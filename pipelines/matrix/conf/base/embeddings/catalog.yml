_spark_parquet_ds: &_spark_parquet
  type: spark.SparkDataset
  file_format: parquet
  save_args:
    mode: overwrite

_neo4j_ds: &_neo4j_ds
  type: matrix.datasets.neo4j.Neo4JSparkDataset
  database: everycure
  url: ${oc.env:NEO4J_HOST,bolt://127.0.0.1:7687}
  credentials: neo4j_credentials
  save_args:
    mode: "overwrite"

embeddings.prm.graph:
  <<: *_neo4j_ds
  save_args:
    query: > 
        MATCH (n {id: event.id})
        WITH event, n
        CALL apoc.ml.vertexai.embedding
        RETURN node
  # load_args:
  #   query: >
  #     MATCH (n {id: event.id}) RETURN n.id as id, toFloat(n.feature) as feature

embeddings.model_input.gds.graph:
  <<: *_neo4j_ds
  load_args:
    gds: gds.graph.project
    gds.graphName: &_graph_name graph_with_feat
    gds.nodeProjection: "*"
    gds.relationshipProjection: "*"
    gds.configuration.nodeProperties: "feature"

embeddings.models.gds.graphsage:
  <<: *_neo4j_ds
  load_args:
    gds: gds.beta.graphSage.train
    gds.graphName: *_graph_name
    gds.configuration.modelName: &_model_name graphsage_model
    gds.configuration.featureProperties: ["feature"]

embeddings.model_output.gds.graphsage:
  <<: *_neo4j_ds
  load_args:
    gds: gds.beta.graphSage.stream
    gds.graphName: *_graph_name
    gds.configuration.modelName: *_model_name

embeddings.model_output.graphsage:
  <<: *_neo4j_ds
  save_args:
    query: > 
        MATCH (n)
        WHERE ID(n) = event.nodeId
        WITH event, n
        CALL apoc.create.setProperty(n, 'graphsage_embedding', event.embedding) YIELD node
        RETURN node
