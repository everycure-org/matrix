integration:
  sources:
    rtx_kg2:
      name: rtx-kg2
      transformer:
        _object: matrix.pipelines.integration.transformers.rtxkg2.RTXTransformer
        version: ${globals:data_sources.rtx_kg2.version}
    spoke:
      name: spoke
      transformer:
        _object: matrix.pipelines.integration.transformers.spoke.SpokeTransformer
        version: ${globals:data_sources.spoke.version}
    robokop:
      name: robokop
      transformer:
        _object: matrix.pipelines.integration.transformers.robokop.RobokopTransformer
        version: ${globals:data_sources.robokop.version}
    primekg:
      name: primekg
      transformer:
        _object: matrix.pipelines.integration.transformers.primekg.PrimeKGTransformer
        version: ${globals:data_sources.primekg.version}
    embiology:
      name: embiology
      transformer:
        _object: matrix.pipelines.integration.transformers.embiology.EmbiologyTransformer
        version: ${globals:data_sources.embiology.version}
    ec_medical_team:
      name: ec_medical_team
      transformer:
        _object: matrix.pipelines.integration.transformers.medical.MedicalTransformer
        version: ${globals:data_sources.ec_medical_team.version}
    ec_clinical_trails:
      name: ec_clinical_trials
      transformer:
        _object: matrix.pipelines.integration.transformers.clinical_trails.ClinicalTrialsTransformer
        version: ${globals:data_sources.ec_clinical_trials.version}
        select_cols: false
        drop_duplicates: true
    drug_list:
      name: drug_list
      transformer:
        _object: matrix.pipelines.integration.transformers.drugs.DrugsTransformer
        version: ${globals:data_sources.drug_list.version}
    disease_list:
      name: disease_list
      transformer:
        _object: matrix.pipelines.integration.transformers.diseases.DiseasesTransformer
        version: ${globals:data_sources.disease_list.version}
    drugmech:
      name: drugmech
      transformer:
         _object: matrix.pipelines.integration.transformers.drugmech.DrugMechTransformer
         version: ${globals:data_sources.drugmech.version}
    ground_truth:
      name: ground_truth
      transformer:
        _object: matrix.pipelines.integration.transformers.ground_truth.KGMLGroundTruthTransformer
        version: ${globals:data_sources.gt.version}
    off_label:
      name: off_label
      transformer:
        _object: matrix.pipelines.integration.transformers.off_label.OffLabelTransformer
        version: ${globals:data_sources.off_label.version}
    orchard:
      name: orchard
      transformer:
        _object: matrix.pipelines.integration.transformers.orchard.OrchardTransformer
        version: ${globals:data_sources.orchard.version}

  # FUTURE: Ensure we can move this to filters down here
  preprocessing:
    rtx:
      semmed_filters:
        publication_threshold: 10
        ngd_threshold: 0.6
        limit_pmids: 50_000_000 # essentially unlimited, but allows for local clipping if local run is desired

  normalization:
    batch_size: 500000  # number of rows per cache file.
    cache_schema:
      _object: matrix.pipelines.batch.schemas.node_normalizer
    normalizer:
      _object: matrix.pipelines.integration.normalizers.normalizers.RENCINodeNormalizer
      conflate: true
      drug_chemical_conflate: true
      items_per_request: 10000  # The API can't handle 10M strings at once
    # If the data backing the results changes, so will the NodeNorm frontend
    # version, which is listed here. Note that it can update as well for other
    # reasons, but at least you have a guarantee. Probably easiest to just bump
    # this anytime the NodeNorm frontend version changes too. Note however that
    # it is not exposed in the endpoint so you might think you're pulling the
    # latest data, but you are effectively returning whatever you had in the
    # cache. Seehttps://github.com/everycure-org/matrix/pull/1269#issuecomment-2755674916
    preprocessor:
      _object: matrix.pipelines.batch.pipeline.pass_through
    target_col: normalization_struct
    primary_key: id

# TODO: Figure out whether to move to filtering or stay here
  deduplication:
    # choose if a node should have the most specific category.
    # E.g. if a node has all_categories [biolink:ChemicalEntity, biolink:NamedThing],
    # then node will be assigned biolink:ChemicalEntity as most specific category.
    # For RTX-KG2 reproduction from KGML-xDTD, choose false
    retrieve_most_specific_category: false