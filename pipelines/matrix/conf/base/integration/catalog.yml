_pandas_csv: &_pandas_csv
  type:  pandas.CSVDataset

_pandas_parquet: &_pandas_parquet
  type: pandas.ParquetDataset

_spark_parquet_ds: &_spark_parquet
  type: matrix.datasets.gcp.LazySparkDataset
  file_format: parquet
  save_args:
    mode: overwrite

_layer_prm: &_layer_prm
  metadata:
    kedro-viz:
      layer: primary


# -------------------------------------------------------------------------
# Datasets
# -------------------------------------------------------------------------

integration.prm.unified_edges:
  <<: [*_spark_parquet, *_layer_prm]
  filepath: ${globals:paths.prm}/unified/edges

integration.prm.unified_nodes:
  <<: [*_spark_parquet, *_layer_prm]
  filepath: ${globals:paths.prm}/unified/nodes

# integration.raw.ground_truth.positives:
#   <<: [*_pandas_csv, *_layer_raw]
#   filepath: ${globals:paths.raw}/ground_truth_data/tp_pairs.txt
#   load_args:
#     sep: "\t"
#   save_args: 
#     sep: "\t"

# integration.raw.ground_truth.negatives:
#   <<: [*_pandas_csv, *_layer_raw]
#   filepath: ${globals:paths.raw}/ground_truth_data/tn_pairs.txt
#   load_args:
#     sep: "\t"
#   save_args: 
#     sep: "\t"

# integration.int.known_pairs@pandas:
#   <<: [*_pandas_parquet, *_layer_int]
#   filepath: ${globals:paths.int}/ground_truth

# integration.int.known_pairs@spark:
#   <<: [*_spark_parquet, *_layer_int]
#   filepath: ${globals:paths.int}/ground_truth


# Move to modelling
# integration.model_input.ground_truth:
#   <<: [*_neo4j_ds, *_layer_int]
#   save_args:
#     query: > 
#       MATCH (source:Entity {id: event.source_id}), (target:Entity {id: event.target_id})
#       CREATE (source)-[rel:GROUND_TRUTH]->(target)
#       WITH rel, event
#       CALL apoc.create.setRelProperties(rel, event.property_keys, event.property_values) YIELD rel as r
#       RETURN r
#   load_args:        
#     query: >
#       MATCH (drug)-[r:GROUND_TRUTH]->(disease) 
#       RETURN 
#         drug.id as source, 
#         drug.topological_embedding as source_embedding,
#         disease.id as target,
#         disease.topological_embedding as target_embedding,
#         toInteger(r.treats) as y