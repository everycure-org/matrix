_pandas_csv: &_pandas_csv
  type:  pandas.CSVDataset

_spark_csv_ds: &_spark_csv
  type: spark.SparkDataset
  file_format: csv
  load_args:
    header: true
    sep: ","

_neo4j_ds: &_neo4j_ds
  type: matrix.datasets.neo4j.Neo4JSparkDataset
  database: everycure
  url: bolt://127.0.0.1:7687
  credentials: neo4j_credentials
  save_args:
    mode: "overwrite"
  
integration.raw.rtx_kg2.nodes:
  <<: *_spark_csv
  filepath: ${globals:paths.raw}/rtx_kg2_nodes.csv

integration.raw.ground_truth.tp:
  <<: *_pandas_csv
  filepath: ${globals:paths.raw}/tp_pairs.txt

integration.raw.ground_truth.tn:
  <<: *_pandas_csv
  filepath: ${globals:paths.raw}/tn_pairs.txt

integration.raw.rtx_kg2.edges:
  <<: *_spark_csv
  filepath: ${globals:paths.raw}/rtx_kg2_edges.csv

integration.int.known_pairs@pandas:
  <<: *_pandas_csv
  filepath: ${globals:paths.int}/ground_truth.csv

integration.int.known_pairs@spark:
  <<: *_spark_csv
  filepath: ${globals:paths.int}/ground_truth.csv

integration.model_input.nodes:
  <<: *_neo4j_ds
  save_args:
    query: > 
      MERGE (n {id: event.id}) 
      WITH event, n
      CALL apoc.create.addLabels(n, [event.label]) YIELD node
      CALL apoc.create.setProperties(n, event.property_keys, event.property_values) YIELD node AS n2
      RETURN node
  load_args:
    query: > 
      MATCH (n) RETURN n.id AS id, n.label AS category

integration.model_input.treats:
  <<: *_neo4j_ds
  save_args:
    query: > 
      MATCH (source:Drug {id: event.source_id}), (target:Disease {id: event.target_id})
      WITH source, target, event
      CALL
        apoc.do.when(
          not exists((source)-[]->(target)), 
          'CALL apoc.create.relationship($source, $event.label, {}, $target) YIELD rel RETURN rel',
          'MATCH (source)-[rel]->(target) return rel',
          {event:event, source:source, target:target}
        ) YIELD value
      CALL apoc.create.setRelProperties(value.rel, event.property_keys, event.property_values) YIELD rel as r
      RETURN count(*)
  load_args:
    schema:
      object: pyspark.sql.types.StructType
      fields:
        - object: pyspark.sql.types.StructField
          name: source
          dataType: 
            object: pyspark.sql.types.StringType
          nullable: False
        - object: pyspark.sql.types.StructField
          name: y
          dataType: 
            object: pyspark.sql.types.BooleanType
          nullable: False
        - object: pyspark.sql.types.StructField
          name: target
          dataType: 
            object: pyspark.sql.types.StringType
          nullable: False
    query: >
      MATCH (drug:Drug)-[r]->(disease:Disease) 
      RETURN drug.id as source, toBoolean(r.treats) as y, disease.id as target