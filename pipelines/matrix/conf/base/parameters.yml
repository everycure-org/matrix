drug_types:
  - biolink:Drug
  - biolink:SmallMolecule

disease_types:
  - biolink:Disease
  - biolink:PhenotypicFeature
  - biolink:BehavioralFeature
  - biolink:DiseaseOrPhenotypicFeature

random_state: &_random_state 111

# Defines strategy for splitting the data, should be a sklearn 
# compatible splitting class.
modeling.splitter:
  object: sklearn.model_selection.StratifiedShuffleSplit
  n_splits: 1 
  test_size: 0.1
  random_state: *_random_state

# Defines strategy for generating drug-disease pairs. Should be a
# class that implements the DrugDiseasePair generator interface.
modeling.generator:
  object: matrix.datasets.graph.NegativeDrugDiseasePairGenerator
  random_state: *_random_state
  n_replacements: 2

# Alternatively
#modeling.generator:
#  object: matrix.datasets.graph.JointDrugDiseasePairGenerator
#  random_state: *_random_state
#  n_unknown: 100

# Defines set of transformers applied to the data prior to model
# training, each of the should be a sklearn transformer.
modeling.transformers:
  flat_source_embedding:
    transformer: 
      object: matrix.pipelines.modelling.transformers.FlatArrayTransformer
      prefix: source_
    features:
      - source_embedding
  flat_target_embedding:
    transformer: 
      object: matrix.pipelines.modelling.transformers.FlatArrayTransformer
      prefix: target_
    features:
      - target_embedding

# Defines estimator used during model training, features can be
# defined using a regex strategy.
modeling.train_args:
  estimator:
    object: xgboost.XGBClassifier
    tree_method: hist
    random_state: *_random_state
  target_col_name: y
  # NOTE: Alternatively we can use a feature pre-selection step
  features:
    - source_+
    - target_+