drug_types:
  - biolink:Drug
  - biolink:SmallMolecule

disease_types:
  - biolink:Disease
  - biolink:PhenotypicFeature
  - biolink:BehavioralFeature
  - biolink:DiseaseOrPhenotypicFeature

random_state: &_random_state 111

# Defines strategy for splitting the data, should be a sklearn 
# compatible splitting class.
modeling.splitter: &_splitter
  object: sklearn.model_selection.StratifiedShuffleSplit
  n_splits: 1 
  test_size: 0.1
  random_state: *_random_state

# Defines strategy for generating drug-disease pairs. Should be a
# class that implements the DrugDiseasePair generator interface.
modeling.generator:
  object: matrix.datasets.graph.RandomDrugDiseasePairGenerator
  random_state: *_random_state

# Defines set of transformers applied to the data prior to model
# training, each of the should be a sklearn transformer.
modeling.transformers:
  flat_source_embedding:
    transformer: 
      object: matrix.pipelines.modelling.transformers.FlatArrayTransformer
      prefix: source_
    features:
      - source_embedding
  flat_target_embedding:
    transformer: 
      object: matrix.pipelines.modelling.transformers.FlatArrayTransformer
      prefix: target_
    features:
      - target_embedding

modeling.model_tuning_args:
  tuner:
    object: matrix.pipelines.modelling.nodes.GaussianSearch
    estimator:
      object: xgboost.XGBClassifier
      tree_method: hist
      random_state: *_random_state
      # Question: Can we, e.g., define learning rate here as starting point?
    n_calls: 10
    dimensions:
      - object: skopt.space.Real
        name: learning_rate
        low: 0.01
        high: 0.5
      - object: skopt.space.Integer
        name: max_depth
        low: 3
        high: 10
      - object: skopt.space.Real
        name: lambda
        low: 0
        high: 1
      - object: skopt.space.Integer
        name: n_estimators
        low: 50
        high: 2500
    splitter:
      <<: *_splitter
  features:
    - source_+
    - target_+
  target_col_name: y