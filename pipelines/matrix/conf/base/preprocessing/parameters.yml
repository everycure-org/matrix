preprocessing.translator:
  normalizer: ${oc.env:NODENORM_ENDPOINT, https://nodenorm.transltr.io/1.5/get_normalized_nodes} #http://localhost:8081
  name_resolver: https://name-resolution-sri-dev.apps.renci.org

preprocessing.enrichment:

  model:
    object: langchain_openai.chat_models.base.ChatOpenAI
    model: gpt-4o-mini
    temperature: 0.8

  tags:
    - object: matrix.pipelines.preprocessing.tagging.Tag
      output_col: is_pathogen_caused
      prompt: "Is {label} a disease usually caused by a pathogen such as bacteria, viruses, parasites, or fungi? Return TRUE or FALSE only"
    - object: matrix.pipelines.preprocessing.tagging.Tag  
      output_col: is_cancer
      prompt: "Is {label} a disease that is classified as a cancer? Return TRUE or FALSE only"
    - object: matrix.pipelines.preprocessing.tagging.Tag  
      output_col: is_glucose_dysfunction
      prompt: "Is {label} a disease which is primarily a disease of glucose dysregulation such as diabetes mellitus? Return TRUE or FALSE only"
    # - object: matrix.pipelines.preprocessing.tagging.Tag
    #   output_col: tag_existing_treatment
    #   prompt: "Are there existing efficacious treatments that cure, prevent, or treat the disease named {label} ? Return TRUE if efficacious treatments exist, otherwise return FALSE"
  # multiple_input:
  #   quality_life_years_lost:
  #     input_params:
  #       input_col: label
  #       output_col: tag_QALY_lost
  #       definition: definition
  #       synonyms: synonyms
  #       prompt: "Output only 'VERY HIGH', 'HIGH', 'MEDIUM', 'LOW', or 'NONE'. Categorize the Quality-Adjusted Life Years (QALYs) lost for {disease} into the categories above, based on morbidity, mortality, and quality adjusted life years lost. To help, the following list - {synonym} - contains synonyms of the disease and the following list - {definition} -provides a definition of the disease. If you are unable to determine QALYs lost for a given disease, used similar diseases to make an estimation"
  #     model_params:
  #       object: *openai_chat_model
  #       model: *model_name
  #       temperature: *temperature
