_kg_paths_dataset: &_kg_paths_dataset
  type: matrix.datasets.paths.KGPathsDataset
  load_args:
    engine: pyarrow

# Raw datasets

moa_extraction.raw.drug_mech_db:
  type: yaml.YAMLDataset
  filepath: ${globals:paths.raw}/moa_extraction/drugmechdb/${globals:data_sources.drugmechdb.version}/indication_paths.yaml

moa_extraction.raw.drugmechdb_entities:
  type: pandas.ParquetDataset
  filepath: ${globals:paths.raw}/moa_extraction/drugmechdb_entities/renci_translator/drugmechdb_entities.parquet # renci_translator : RENCI prenormalizer | arax_translator : ARAX prenormalizer

# Neo4j databases

"moa_extraction.input_nodes.{num_hops}_hop":
  type: matrix.datasets.neo4j.Neo4JSparkDataset
  database: analytics-{num_hops}-hop
  url: ${globals:neo4j.host}
  credentials: neo4j_credentials
  save_args:
    mode: overwrite
    script: >
      CREATE CONSTRAINT IF NOT EXISTS FOR (n:Entity) REQUIRE n.id IS UNIQUE;
    query: > 
      CREATE (n:Entity {{id: event.id, kg_sources: event.kg_sources}})
      WITH event, n
      CALL apoc.create.addLabels(n, [event.label]) YIELD node
      CALL apoc.create.setProperties(n, event.property_keys, event.property_values) YIELD node AS n2
      CALL apoc.create.setProperties(n, event.array_property_keys, event.array_property_values) YIELD node AS n3
      RETURN node

"moa_extraction.input_edges.{num_hops}_hop":
  type: matrix.datasets.neo4j.Neo4JSparkDataset
  database: analytics-{num_hops}-hop
  url: ${globals:neo4j.host}
  credentials: neo4j_credentials
  save_args:
    query: > 
      MATCH (subject:Entity {{id: event.subject}}), (object:Entity {{id: event.object}})
      WITH subject, object, event
      CALL apoc.create.relationship(subject, event.label, {{kg_sources: event.kg_sources}}, object) YIELD rel
      RETURN rel


# Intermediate and output datasets

"moa_extraction.reporting.add_tags_{num_hops}_hop":
  type: yaml.YAMLDataset
  filepath: ${globals:paths.moa_extraction}/reporting/add_tags_{num_hops}_hop.yml

"moa_extraction.feat.category_encoder_{num_hops}_hop":
  type: pickle.PickleDataset
  filepath: ${globals:paths.moa_extraction}/feat/category_encoder_{num_hops}_hop.pickle

"moa_extraction.feat.relation_encoder_{num_hops}_hop":
  type: pickle.PickleDataset
  filepath: ${globals:paths.moa_extraction}/feat/relation_encoder_{num_hops}_hop.pickle

"moa_extraction.int.{num_hops}_hop_indication_paths":
  <<: *_kg_paths_dataset
  filepath: ${globals:paths.moa_extraction}/int/{num_hops}_hop_indication_paths.parquet

"moa_extraction.reporting.{num_hops}_hop_mapping_success@yaml":
  filepath: ${globals:paths.moa_extraction}/reporting/{num_hops}_hop_mapping_success
  type:  yaml.YAMLDataset

"moa_extraction.prm.{num_hops}_hop_splits":
  <<: *_kg_paths_dataset
  filepath: ${globals:paths.moa_extraction}/prm/{num_hops}_hop_split.parquet