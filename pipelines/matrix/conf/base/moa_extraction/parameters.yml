moa_extraction:
  gdb:
    object: matrix.pipelines.embeddings.nodes.GraphDB
    endpoint: ${globals:neo4j.host}
    database: everycure-test-release # everycure-run-23-aug-setup-4 # analytics
    auth:
      -  ${globals:neo4j.user}
      -  ${globals:neo4j.password}
  # gdb:
  #   object: matrix.pipelines.moa_extraction.utils.Neo4jRunner
  #   uri: ${globals:neo4j.host}
  #   database: everycure-test-release # analytics
  #   user:  ${globals:neo4j.user}
  #   password: ${globals:neo4j.password}

  tagging_options:
    drug_types:
      - Drug
      - SmallMolecule
      - ChemicalEntity
    disease_types:
      - Disease
      - PhenotypicFeature
      - BehavioralFeature
      - DiseaseOrPhenotypicFeature
    batch_size: 1000000
    verbose: True
  
  path_mapping:
    mapper_two_hop: 
      object: matrix.pipelines.moa_extraction.path_mapping.SetwisePathMapper
      num_hops: 2
      unidirectional: false
      max_entries: 10 # For testing purposes only
    mapper_three_hop: 
      object: matrix.pipelines.moa_extraction.path_mapping.SetwisePathMapper
      num_hops: 3
      unidirectional: false
      max_entries: 10 # For testing purposes only
    synonymizer_endpoint: http://localhost:8081

  splits:
    splitter_two_hop:
      object: matrix.pipelines.modelling.model_selection.GroupAwareSplit
      group_by_column: source_id
      test_size: 0.4
      random_state: ${globals:random_state}
    splitter_three_hop:
      object: matrix.pipelines.modelling.model_selection.GroupAwareSplit
      group_by_column: "source_id"
      test_size: 0.4
      random_state: ${globals:random_state}

  path_embeddings:
    strategy:
      object: matrix.pipelines.moa_extraction.path_embeddings.TwoDimensionalTypesAndRelations
      is_embed_directions: true
 
  training:

    two_hop:
      tuner:
        object: matrix.pipelines.modelling.tuning.GaussianSearch
        estimator:
          object: matrix.pipelines.moa_extraction.models.SkorchWrapper
          module: TransformerBinaryClassifier
          optimizer: torch.optim.Adam
          criterion: torch.nn.BCEWithLogitsLoss
          module__token_dim: 100
          module__num_heads: 4
          device: 'cpu'
        n_calls: 20
        dimensions:
          - object: skopt.space.Real
            name: module__dropout
            low: 0
            high: 0.4
          - object: skopt.space.Integer
            name: max_epochs
            low: 10
            high: 100
          - object: skopt.space.Integer
            name: module__num_layers
            low: 1
            high: 5
        scoring: 
          object: matrix.pipelines.modelling.utils.partial_
          func:
            object: sklearn.metrics.f1_score
          average: macro
        splitter:
          object: sklearn.model_selection.StratifiedShuffleSplit
          n_splits: 1 
          test_size: 0.1
          random_state: ${globals:random_state}
      negative_samplers:
        - object: matrix.pipelines.moa_extraction.path_generators.ReplacementPathSampler
          num_replacement_paths: 2
          unidirectional: &unidirectional False
          edge_omission_rules:
            all: ['drug_disease']
          random_state: ${globals:random_state}

    three_hop:
      tuner:
        object: matrix.pipelines.modelling.tuning.GaussianSearch
        estimator:
          object: matrix.pipelines.moa_extraction.models.SkorchWrapper
          module: TransformerBinaryClassifier
          optimizer: torch.optim.Adam
          criterion: torch.nn.BCEWithLogitsLoss
          module__token_dim: 100
          module__num_heads: 4
          device: 'cpu'
        n_calls: 20
        dimensions:
          - object: skopt.space.Real
            name: module__dropout
            low: 0
            high: 0.4
          - object: skopt.space.Integer
            name: max_epochs
            low: 10
            high: 100
          - object: skopt.space.Integer
            name: module__num_layers
            low: 1
            high: 5
        scoring: 
          object: matrix.pipelines.modelling.utils.partial_
          func:
            object: sklearn.metrics.f1_score
          average: macro
        splitter:
          object: sklearn.model_selection.StratifiedShuffleSplit
          n_splits: 1 
          test_size: 0.1
          random_state: ${globals:random_state}
      negative_samplers:
        - object: matrix.pipelines.moa_extraction.path_generators.ReplacementPathSampler
          num_replacement_paths: 2
          unidirectional: *unidirectional
          edge_omission_rules:
            all: ['drug_disease']
          random_state: ${globals:random_state}

  evaluation:

    two_hop:
      path_generator: &_two_hop_path_generator
        object: matrix.pipelines.moa_extraction.path_generators.AllPathsWithRules
        edge_omission_rules:
          all: ['drug_disease']
          2: ['disease_disease']
        num_hops: 2
        unidirectional: *unidirectional
        # num_limit: 25 # For testing purposes only
      k_lst: [5, 25]

    three_hop:
      path_generator: &_three_hop_path_generator
        object: matrix.pipelines.moa_extraction.path_generators.AllPathsWithRules
        edge_omission_rules:
          all: ['drug_disease', 'drug_drug']
          3: ['disease_disease']
        num_hops: 3
        unidirectional: *unidirectional
        # num_limit: 25 # For testing purposes only
      k_lst: [5, 25]


  predictions:
    num_pairs_limit: 10 # For testing purposes only
    num_paths_per_pair_limit: 1000
    include_edge_directions: true
    drug_col_name: drug_id
    disease_col_name: disease_id
    two_hop:
      path_generator: *_two_hop_path_generator
    three_hop:
      path_generator: *_three_hop_path_generator
