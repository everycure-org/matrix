# overriding the default compose for CI. Several reasons:
# 1) we override the neo4j image to Intel
# 2) override the images to avoid keeping state in CI (no data mount)
# 3) add an execution of the matrix-pipeline in a container to execute against the services defined in the base compose file 
services:
  neo4j:
    # FUTURE: Newever container version gives issues, due to `apoc-extended`
    # and `gds` versions not being released yet. Update when released.
    # overwriting volumes so we don't have any
    # https://docs.docker.com/reference/compose-file/merge/#reset-value
    environment:
      # SSL Configuration
      - NEO4J_dbms_ssl_policy_bolt_enabled=true
      - NEO4J_dbms_ssl_policy_bolt_base__directory=certificates/bolt
      - NEO4J_dbms_ssl_policy_bolt_private__key=private_and_public.pem
      - NEO4J_dbms_ssl_policy_bolt_public__certificate=public.crt
      
      # Bolt TLS Configuration
      - NEO4J_dbms_connector_bolt_enabled=true
      - NEO4J_dbms_connector_bolt_tls__level=REQUIRED
    volumes: !override 
      # note we do NOT mount data which makes the CI container stateless
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
      - ./certs/bolt/private_and_public.pem:/var/lib/neo4j/certificates/bolt/private_and_public.pem
      - ./certs/bolt/public.crt:/var/lib/neo4j/certificates/bolt/public.crt

  mockserver:
    environment:
      MOCKSERVER_LOG_LEVEL: ERROR
  

  matrix-pipeline:
    image: ${IMG}
    container_name: matrix
    #build: 
    #  context: "../"
    #  platforms: 
    #    - linux/amd64    # NOTE: We're omitting --runner ThreadRunner due to a CI
    # only bug. We suspect that this is due to the hooks setup
    # that should be resolved in the following issue:
    # https://github.com/Galileo-Galilei/kedro-mlflow/issues/579
    entrypoint:
      - "/bin/sh"
      - -ecx
      - |
          kedro run -e test -p test --without-tags xg_ensemble,not-shared
    environment:
      TQDM_DISABLE: 1
      NODENORM_ENDPOINT: http://mockserver:1080/1.5/get_normalized_nodes
      NEO4J_HOST: bolt+ssc://neo4j:7687 # NOTE: Passing in bolt+s as our CLI Neo4J has SSL enabled
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: admin
      OPENAI_ENDPOINT: http://mockserver:1080/v1
      MLFLOW_ENDPOINT: http://mlflow:5000
      MLFLOW_EXPERIMENT_ID: 1
      MLFLOW_RUN_ID: null
      MLFLOW_URL: https://mlflow.platform.dev.everycure.org/
      OPENAI_API_KEY: sk-proj-abc
      RUNTIME_GCP_PROJECT_ID: -prod- # This is to enable testing of private datasets
      RUNTIME_GCP_BUCKET: mtrx-us-central1-hub-dev-storage
      DEV_GCS_BUCKET: mtrx-us-central1-hub-dev-storage
      PROD_GCS_BUCKET: mtrx-us-central1-hub-prod-storage
      DEV_GCP_PROJECT_ID: mtrx-hub-dev-3of
      KEDRO_DYNAMIC_PIPELINES_MAPPING_CROSS_VALIDATION_N_CROSS_VAL_FOLDS: 2
      KEDRO_DYNAMIC_PIPELINES_MAPPING_MODELLING_XG_ENSEMBLE_NUM_SHARDS: 2
      SPARK_DRIVER_MEMORY: 30
    depends_on:
      neo4j:
        condition: service_healthy
      mlflow: 
        condition: service_healthy
  mlflow:
    container_name: mlflow
    build:  "services/mlflow"
    ports:
      - "5001:5000"
    command: mlflow server --host 0.0.0.0 --serve-artifacts
    healthcheck:
      test: wget http://localhost:5000/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
volumes:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins: